// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Data table component Renders data table component 1`] = `
<DataTable
  visualizations={
    Object {
      "data": Object {
        "appData": Object {
          "fromApp": false,
        },
        "defaultAxes": Object {},
        "indexFields": Object {
          "availableFields": Array [
            Object {
              "name": "agent",
              "type": "string",
            },
            Object {
              "name": "bytes",
              "type": "long",
            },
            Object {
              "name": "clientip",
              "type": "ip",
            },
            Object {
              "name": "event",
              "type": "struct",
            },
            Object {
              "name": "extension",
              "type": "string",
            },
            Object {
              "name": "geo",
              "type": "struct",
            },
            Object {
              "name": "host",
              "type": "string",
            },
            Object {
              "name": "index",
              "type": "string",
            },
            Object {
              "name": "ip",
              "type": "ip",
            },
            Object {
              "name": "machine",
              "type": "struct",
            },
            Object {
              "name": "memory",
              "type": "double",
            },
            Object {
              "name": "message",
              "type": "string",
            },
            Object {
              "name": "phpmemory",
              "type": "long",
            },
            Object {
              "name": "referer",
              "type": "string",
            },
            Object {
              "name": "request",
              "type": "string",
            },
            Object {
              "name": "response",
              "type": "string",
            },
            Object {
              "name": "tags",
              "type": "string",
            },
            Object {
              "name": "timestamp",
              "type": "timestamp",
            },
            Object {
              "name": "url",
              "type": "string",
            },
            Object {
              "name": "utc_time",
              "type": "timestamp",
            },
          ],
          "queriedFields": Array [
            Object {
              "name": "double_per_ip_bytes",
              "type": "long",
            },
            Object {
              "name": "host",
              "type": "text",
            },
            Object {
              "name": "ip_count",
              "type": "integer",
            },
            Object {
              "name": "per_ip_bytes",
              "type": "long",
            },
            Object {
              "name": "resp_code",
              "type": "text",
            },
            Object {
              "name": "sum_bytes",
              "type": "long",
            },
          ],
          "selectedFields": Array [],
          "unselectedFields": Array [],
        },
        "query": Object {},
        "rawVizData": Object {
          "data": Object {
            "count()": Array [
              154,
              1753,
              116,
              468,
              1964,
              219,
            ],
            "tags": Array [
              "error",
              "info",
              "login",
              "security",
              "success",
              "warning",
            ],
          },
          "jsonData": Array [
            Object {
              "count()": 154,
              "tags": "error",
            },
            Object {
              "count()": 1753,
              "tags": "info",
            },
            Object {
              "count()": 116,
              "tags": "login",
            },
            Object {
              "count()": 468,
              "tags": "security",
            },
            Object {
              "count()": 1964,
              "tags": "success",
            },
            Object {
              "count()": 219,
              "tags": "warning",
            },
          ],
          "metadata": Object {
            "fields": Array [
              Object {
                "name": "count()",
                "type": "integer",
              },
              Object {
                "name": "tags",
                "type": "text",
              },
            ],
            "size": 6,
            "status": 200,
          },
        },
        "userConfigs": Object {},
      },
      "vis": Object {
        "category": "Visualizations",
        "categoryAxis": "xaxis",
        "component": [Function],
        "editorConfig": Object {
          "panelTabs": Array [
            Object {
              "editor": [Function],
              "id": "data-panel",
              "mapTo": "dataConfig",
              "name": "Data",
              "sections": Array [
                Object {
                  "editor": [Function],
                  "id": "value_options",
                  "mapTo": "valueOptions",
                  "name": "Value options",
                  "schemas": Array [
                    Object {
                      "component": null,
                      "isSingleSelection": false,
                      "mapTo": "xaxis",
                      "name": "X-axis",
                    },
                    Object {
                      "component": null,
                      "isSingleSelection": false,
                      "mapTo": "yaxis",
                      "name": "Y-axis",
                    },
                  ],
                },
                Object {
                  "editor": [Function],
                  "id": "chart_options",
                  "mapTo": "chartOptions",
                  "name": "Chart options",
                  "schemas": Array [
                    Object {
                      "component": null,
                      "isSingleSelection": true,
                      "mapTo": "orientation",
                      "name": "Orientation",
                      "props": Object {
                        "defaultSelections": Array [
                          Object {
                            "name": "Vertical",
                            "orientationId": "v",
                          },
                        ],
                        "dropdownList": Array [
                          Object {
                            "name": "Vertical",
                            "orientationId": "v",
                          },
                          Object {
                            "name": "Horizontal",
                            "orientationId": "h",
                          },
                        ],
                      },
                    },
                    Object {
                      "component": null,
                      "isSingleSelection": true,
                      "mapTo": "mode",
                      "name": "Mode",
                      "props": Object {
                        "defaultSelections": Array [
                          Object {
                            "modeId": "group",
                            "name": "Group",
                          },
                        ],
                        "dropdownList": Array [
                          Object {
                            "modeId": "group",
                            "name": "Group",
                          },
                          Object {
                            "modeId": "stack",
                            "name": "Stack",
                          },
                        ],
                      },
                    },
                  ],
                },
              ],
            },
            Object {
              "content": Array [],
              "editor": [Function],
              "id": "style-panel",
              "mapTo": "layoutConfig",
              "name": "Layout",
            },
            Object {
              "editor": [Function],
              "id": "availability-panel",
              "mapTo": "availabilityConfig",
              "name": "Availability",
            },
          ],
        },
        "fullLabel": "Bar",
        "icon": [Function],
        "iconType": "visBarVerticalStacked",
        "id": "bar",
        "label": "Bar",
        "name": "bar",
        "orientation": "v",
        "selection": Object {
          "dataLoss": "nothing",
        },
        "seriesAxis": "yaxis",
        "type": "bar",
        "visConfig": Object {
          "config": Object {
            "displaylogo": false,
            "responsive": true,
          },
          "isUniColor": false,
          "layout": Object {
            "height": 500,
            "legend": Object {
              "orientation": "v",
              "traceorder": "normal",
            },
            "margin": Object {
              "b": 30,
              "l": 60,
              "pad": 0,
              "r": 30,
              "t": 50,
            },
            "showlegend": true,
          },
        },
      },
    }
  }
>
  <EuiDataGrid
    aria-label="viz data table"
    columnVisibility={
      Object {
        "setVisibleColumns": [Function],
        "visibleColumns": Array [
          "count()",
          "tags",
        ],
      }
    }
    columns={
      Array [
        Object {
          "id": "count()",
        },
        Object {
          "id": "tags",
        },
      ]
    }
    data-test-subj="workspace__dataTable"
    pagination={
      Object {
        "onChangeItemsPerPage": [Function],
        "onChangePage": [Function],
        "pageIndex": 0,
        "pageSize": 10,
        "pageSizeOptions": Array [
          10,
          50,
          100,
        ],
      }
    }
    renderCellValue={[Function]}
    rowCount={6}
    sorting={
      Object {
        "columns": Array [],
        "onSort": [Function],
      }
    }
  >
    <EuiFocusTrap
      className="euiDataGrid__focusWrap"
      clickOutsideDisables={false}
      disabled={true}
      noIsolation={true}
      returnFocus={true}
      scrollLock={false}
    >
      <ForwardRef
        className="euiDataGrid__focusWrap"
        enabled={false}
        noIsolation={true}
        onClickOutside={[Function]}
        returnFocus={true}
        scrollLock={false}
      >
        <ForwardRef
          className="euiDataGrid__focusWrap"
          enabled={false}
          noIsolation={true}
          onClickOutside={[Function]}
          returnFocus={true}
          scrollLock={false}
          sideCar={[Function]}
        >
          <ForwardRef(FocusLockUI)
            as={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "classNames": Object {
                  "fullWidth": "width-before-scroll-bar",
                  "zeroRight": "right-scroll-bar-position",
                },
                "defaultProps": Object {
                  "enabled": true,
                  "inert": false,
                  "removeScrollBar": true,
                },
                "render": [Function],
              }
            }
            autoFocus={true}
            className="euiDataGrid__focusWrap"
            crossFrame={true}
            disabled={true}
            lockProps={
              Object {
                "allowPinchZoom": undefined,
                "as": undefined,
                "enabled": false,
                "inert": undefined,
                "shards": undefined,
                "sideCar": [Function],
                "style": undefined,
              }
            }
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={true}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={-1}
            />
            <ForwardRef
              className="euiDataGrid__focusWrap"
              data-focus-lock-disabled="disabled"
              enabled={false}
              inert={false}
              onBlur={[Function]}
              onFocus={[Function]}
              removeScrollBar={true}
              sideCar={[Function]}
            >
              <div
                className="euiDataGrid__focusWrap"
                data-focus-lock-disabled="disabled"
                onBlur={[Function]}
                onFocus={[Function]}
                onScrollCapture={[Function]}
                onTouchMoveCapture={[Function]}
                onWheelCapture={[Function]}
              >
                <div
                  className="euiDataGrid euiDataGrid--bordersAll euiDataGrid--headerShade euiDataGrid--footerOverline euiDataGrid--rowHoverHighlight euiDataGrid--stickyFooter"
                  data-test-subj="workspace__dataTable"
                  onKeyDown={[Function]}
                  style={
                    Object {
                      "height": undefined,
                      "width": undefined,
                    }
                  }
                />
              </div>
            </ForwardRef>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={-1}
            />
          </ForwardRef(FocusLockUI)>
        </ForwardRef>
      </ForwardRef>
    </EuiFocusTrap>
  </EuiDataGrid>
</DataTable>
`;
