// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Panels View Component renders panel view container with visualizations 1`] = `
<CustomPanelView
  chrome={
    Object {
      "getIsNavDrawerLocked$": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Observable {
              "_isScalar": false,
              "_subscribe": [Function],
            },
          },
          Object {
            "type": "return",
            "value": Observable {
              "_isScalar": false,
              "_subscribe": [Function],
            },
          },
          Object {
            "type": "return",
            "value": Observable {
              "_isScalar": false,
              "_subscribe": [Function],
            },
          },
          Object {
            "type": "return",
            "value": Observable {
              "_isScalar": false,
              "_subscribe": [Function],
            },
          },
        ],
      },
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              Object {
                "href": "#/operational_panels/",
                "text": "Operational panels",
              },
              Object {
                "href": "observability#/",
                "text": "Observability",
              },
              Object {
                "href": "observability#/L8Sx53wBDp0rvEg3yoLb",
                "text": "",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  cloneCustomPanel={[MockFunction]}
  deleteCustomPanel={[MockFunction]}
  dslService={
    DSLService {
      "fetch": [Function],
      "fetchFields": [Function],
      "fetchIndices": [Function],
      "http": [MockFunction],
    }
  }
  endTime="now"
  http={[MockFunction]}
  onEditClick={[Function]}
  page="operationalPanels"
  panelId="L8Sx53wBDp0rvEg3yoLb"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "#/operational_panels/",
        "text": "Operational panels",
      },
      Object {
        "href": "observability#/",
        "text": "Observability",
      },
    ]
  }
  pplService={
    PPLService {
      "fetch": [Function],
      "http": [MockFunction],
    }
  }
  renameCustomPanel={[MockFunction]}
  setEndTime={[MockFunction]}
  setStartTime={[MockFunction]}
  setToast={[MockFunction]}
  startTime="now-30m"
>
  <div>
    <EuiPage
      id="panelView"
    >
      <div
        className="euiPage euiPage--paddingMedium euiPage--grow"
        id="panelView"
      >
        <EuiPageBody
          component="div"
        >
          <div
            className="euiPageBody euiPageBody--borderRadiusNone"
          >
            <EuiPageHeader>
              <header
                className="euiPageHeader euiPageHeader--responsive euiPageHeader--center"
              >
                <EuiPageHeaderSection>
                  <div
                    className="euiPageHeaderSection"
                  >
                    <EuiTitle
                      size="l"
                    >
                      <h1
                        className="euiTitle euiTitle--large"
                      />
                    </EuiTitle>
                    <EuiFlexItem>
                      <div
                        className="euiFlexItem"
                      >
                        <EuiSpacer
                          size="s"
                        >
                          <div
                            className="euiSpacer euiSpacer--s"
                          />
                        </EuiSpacer>
                      </div>
                    </EuiFlexItem>
                    Created on 
                    Invalid date
                  </div>
                </EuiPageHeaderSection>
                <EuiPageHeaderSection>
                  <div
                    className="euiPageHeaderSection"
                  >
                    <EuiFlexGroup
                      gutterSize="s"
                    >
                      <div
                        className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiFlexGroup--responsive"
                      >
                        <EuiFlexItem>
                          <div
                            className="euiFlexItem"
                          >
                            <EuiButton
                              disabled={true}
                              iconType="pencil"
                              onClick={[Function]}
                            >
                              <EuiButtonDisplay
                                baseClassName="euiButton"
                                disabled={true}
                                element="button"
                                iconType="pencil"
                                isDisabled={true}
                                onClick={[Function]}
                                type="button"
                              >
                                <button
                                  className="euiButton euiButton--primary euiButton-isDisabled"
                                  disabled={true}
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "minWidth": undefined,
                                    }
                                  }
                                  type="button"
                                >
                                  <EuiButtonContent
                                    className="euiButton__content"
                                    iconSide="left"
                                    iconType="pencil"
                                    textProps={
                                      Object {
                                        "className": "euiButton__text",
                                      }
                                    }
                                  >
                                    <span
                                      className="euiButtonContent euiButton__content"
                                    >
                                      <EuiIcon
                                        className="euiButtonContent__icon"
                                        color="inherit"
                                        size="m"
                                        type="pencil"
                                      >
                                        <EuiIconPencil
                                          aria-hidden={true}
                                          className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                          focusable="false"
                                          role="img"
                                          style={null}
                                        >
                                          <svg
                                            aria-hidden={true}
                                            className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                            focusable="false"
                                            height={16}
                                            role="img"
                                            style={null}
                                            viewBox="0 0 16 16"
                                            width={16}
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <path
                                              d="M12.148 3.148L11 2l-9 9v3h3l9-9-1.144-1.144-8.002 7.998a.502.502 0 01-.708 0 .502.502 0 010-.708l8.002-7.998zM11 1c.256 0 .512.098.707.293l3 3a.999.999 0 010 1.414l-9 9A.997.997 0 015 15H2a1 1 0 01-1-1v-3c0-.265.105-.52.293-.707l9-9A.997.997 0 0111 1zM5 14H2v-3l3 3z"
                                            />
                                          </svg>
                                        </EuiIconPencil>
                                      </EuiIcon>
                                      <span
                                        className="euiButton__text"
                                      >
                                        Edit
                                      </span>
                                    </span>
                                  </EuiButtonContent>
                                </button>
                              </EuiButtonDisplay>
                            </EuiButton>
                          </div>
                        </EuiFlexItem>
                        <EuiFlexItem
                          grow={false}
                        >
                          <div
                            className="euiFlexItem euiFlexItem--flexGrowZero"
                          >
                            <EuiPopover
                              anchorPosition="downCenter"
                              button={
                                <EuiButton
                                  disabled={false}
                                  iconSide="right"
                                  iconType="arrowDown"
                                  onClick={[Function]}
                                >
                                  Panel actions
                                </EuiButton>
                              }
                              closePopover={[Function]}
                              display="inlineBlock"
                              hasArrow={true}
                              isOpen={false}
                              ownFocus={true}
                              panelPaddingSize="none"
                              withTitle={true}
                            >
                              <div
                                className="euiPopover euiPopover--anchorDownCenter"
                                withTitle={true}
                              >
                                <div
                                  className="euiPopover__anchor"
                                >
                                  <EuiButton
                                    disabled={false}
                                    iconSide="right"
                                    iconType="arrowDown"
                                    onClick={[Function]}
                                  >
                                    <EuiButtonDisplay
                                      baseClassName="euiButton"
                                      disabled={false}
                                      element="button"
                                      iconSide="right"
                                      iconType="arrowDown"
                                      isDisabled={false}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <button
                                        className="euiButton euiButton--primary"
                                        disabled={false}
                                        onClick={[Function]}
                                        style={
                                          Object {
                                            "minWidth": undefined,
                                          }
                                        }
                                        type="button"
                                      >
                                        <EuiButtonContent
                                          className="euiButton__content"
                                          iconSide="right"
                                          iconType="arrowDown"
                                          textProps={
                                            Object {
                                              "className": "euiButton__text",
                                            }
                                          }
                                        >
                                          <span
                                            className="euiButtonContent euiButtonContent--iconRight euiButton__content"
                                          >
                                            <EuiIcon
                                              className="euiButtonContent__icon"
                                              color="inherit"
                                              size="m"
                                              type="arrowDown"
                                            >
                                              <EuiIconArrowDown
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                                focusable="false"
                                                role="img"
                                                style={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                                  focusable="false"
                                                  height={16}
                                                  role="img"
                                                  style={null}
                                                  viewBox="0 0 16 16"
                                                  width={16}
                                                  xmlns="http://www.w3.org/2000/svg"
                                                >
                                                  <path
                                                    d="M13.069 5.157L8.384 9.768a.546.546 0 01-.768 0L2.93 5.158a.552.552 0 00-.771 0 .53.53 0 000 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 000-.76.552.552 0 00-.771 0z"
                                                    fillRule="non-zero"
                                                  />
                                                </svg>
                                              </EuiIconArrowDown>
                                            </EuiIcon>
                                            <span
                                              className="euiButton__text"
                                            >
                                              Panel actions
                                            </span>
                                          </span>
                                        </EuiButtonContent>
                                      </button>
                                    </EuiButtonDisplay>
                                  </EuiButton>
                                </div>
                              </div>
                            </EuiPopover>
                          </div>
                        </EuiFlexItem>
                        <EuiFlexItem
                          grow={false}
                        >
                          <div
                            className="euiFlexItem euiFlexItem--flexGrowZero"
                          >
                            <AddVisualizationPopover
                              addVizDisabled={false}
                              showFlyout={[Function]}
                            >
                              <EuiPopover
                                anchorPosition="downLeft"
                                button={
                                  <EuiButton
                                    data-test-subj="addVisualizationButton"
                                    disabled={false}
                                    iconSide="right"
                                    iconType="arrowDown"
                                    onClick={[Function]}
                                  >
                                    Add visualization
                                  </EuiButton>
                                }
                                closePopover={[Function]}
                                display="inlineBlock"
                                hasArrow={true}
                                id="addVisualizationContextMenu"
                                isOpen={false}
                                ownFocus={true}
                                panelPaddingSize="none"
                              >
                                <div
                                  className="euiPopover euiPopover--anchorDownLeft"
                                  id="addVisualizationContextMenu"
                                >
                                  <div
                                    className="euiPopover__anchor"
                                  >
                                    <EuiButton
                                      data-test-subj="addVisualizationButton"
                                      disabled={false}
                                      iconSide="right"
                                      iconType="arrowDown"
                                      onClick={[Function]}
                                    >
                                      <EuiButtonDisplay
                                        baseClassName="euiButton"
                                        data-test-subj="addVisualizationButton"
                                        disabled={false}
                                        element="button"
                                        iconSide="right"
                                        iconType="arrowDown"
                                        isDisabled={false}
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          className="euiButton euiButton--primary"
                                          data-test-subj="addVisualizationButton"
                                          disabled={false}
                                          onClick={[Function]}
                                          style={
                                            Object {
                                              "minWidth": undefined,
                                            }
                                          }
                                          type="button"
                                        >
                                          <EuiButtonContent
                                            className="euiButton__content"
                                            iconSide="right"
                                            iconType="arrowDown"
                                            textProps={
                                              Object {
                                                "className": "euiButton__text",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiButtonContent euiButtonContent--iconRight euiButton__content"
                                            >
                                              <EuiIcon
                                                className="euiButtonContent__icon"
                                                color="inherit"
                                                size="m"
                                                type="arrowDown"
                                              >
                                                <EuiIconArrowDown
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      d="M13.069 5.157L8.384 9.768a.546.546 0 01-.768 0L2.93 5.158a.552.552 0 00-.771 0 .53.53 0 000 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 000-.76.552.552 0 00-.771 0z"
                                                      fillRule="non-zero"
                                                    />
                                                  </svg>
                                                </EuiIconArrowDown>
                                              </EuiIcon>
                                              <span
                                                className="euiButton__text"
                                              >
                                                Add visualization
                                              </span>
                                            </span>
                                          </EuiButtonContent>
                                        </button>
                                      </EuiButtonDisplay>
                                    </EuiButton>
                                  </div>
                                </div>
                              </EuiPopover>
                            </AddVisualizationPopover>
                          </div>
                        </EuiFlexItem>
                      </div>
                    </EuiFlexGroup>
                  </div>
                </EuiPageHeaderSection>
              </header>
            </EuiPageHeader>
            <EuiPageContentBody>
              <div
                className="euiPageContentBody"
              >
                <EuiFlexGroup
                  gutterSize="s"
                >
                  <div
                    className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiFlexGroup--responsive"
                  >
                    <EuiFlexItem>
                      <div
                        className="euiFlexItem"
                      >
                        <Autocomplete
                          append={
                            <EuiLink
                              aria-label="ppl-info"
                              onClick={[Function]}
                              style={
                                Object {
                                  "padding": "10px",
                                }
                              }
                            >
                              PPL
                            </EuiLink>
                          }
                          baseQuery="source = "
                          dslService={
                            DSLService {
                              "fetch": [Function],
                              "fetchFields": [Function],
                              "fetchIndices": [Function],
                              "http": [MockFunction],
                            }
                          }
                          getSuggestions={[Function]}
                          handleQueryChange={[Function]}
                          handleQuerySearch={[Function]}
                          isDisabled={true}
                          key="autocomplete-search-bar"
                          onItemSelect={[Function]}
                          placeholder="Use PPL 'where' clauses to add filters on all visualizations [where Carrier = 'OpenSearch-Air']"
                          possibleCommands={
                            Array [
                              Object {
                                "label": "where",
                              },
                            ]
                          }
                          query=""
                          tabId="panels-filter"
                          tempQuery=""
                        >
                          <div
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-labelledby="autocomplete-4-label"
                            className="aa-Autocomplete"
                            id="autocomplete-root"
                            role="combobox"
                          >
                            <EuiFieldText
                              append={
                                <EuiLink
                                  aria-label="ppl-info"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "padding": "10px",
                                    }
                                  }
                                >
                                  PPL
                                </EuiLink>
                              }
                              aria-autocomplete="both"
                              aria-labelledby="autocomplete-4-label"
                              autoCapitalize="off"
                              autoComplete="off"
                              autoCorrect="off"
                              autoFocus={false}
                              data-test-subj="searchAutocompleteTextArea"
                              disabled={true}
                              enterKeyHint="search"
                              fullWidth={true}
                              id="autocomplete-textarea"
                              maxLength={512}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onClick={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              placeholder="Use PPL 'where' clauses to add filters on all visualizations [where Carrier = 'OpenSearch-Air']"
                              spellCheck="false"
                              type="search"
                              value=""
                            >
                              <EuiFormControlLayout
                                append={
                                  <EuiLink
                                    aria-label="ppl-info"
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "padding": "10px",
                                      }
                                    }
                                  >
                                    PPL
                                  </EuiLink>
                                }
                                fullWidth={true}
                                inputId="autocomplete-textarea"
                              >
                                <div
                                  className="euiFormControlLayout euiFormControlLayout--fullWidth euiFormControlLayout--group"
                                >
                                  <div
                                    className="euiFormControlLayout__childrenWrapper"
                                  >
                                    <EuiValidatableControl>
                                      <input
                                        aria-autocomplete="both"
                                        aria-labelledby="autocomplete-4-label"
                                        autoCapitalize="off"
                                        autoComplete="off"
                                        autoCorrect="off"
                                        autoFocus={false}
                                        className="euiFieldText euiFieldText--fullWidth euiFieldText--inGroup"
                                        data-test-subj="searchAutocompleteTextArea"
                                        disabled={true}
                                        enterKeyHint="search"
                                        id="autocomplete-textarea"
                                        maxLength={512}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        placeholder="Use PPL 'where' clauses to add filters on all visualizations [where Carrier = 'OpenSearch-Air']"
                                        spellCheck="false"
                                        type="search"
                                        value=""
                                      />
                                    </EuiValidatableControl>
                                    <EuiFormControlLayoutIcons />
                                  </div>
                                  <EuiLink
                                    aria-label="ppl-info"
                                    className="euiFormControlLayout__append"
                                    key="0/.0"
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "padding": "10px",
                                      }
                                    }
                                  >
                                    <button
                                      aria-label="ppl-info"
                                      className="euiLink euiLink--primary euiFormControlLayout__append"
                                      disabled={false}
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "padding": "10px",
                                        }
                                      }
                                      type="button"
                                    >
                                      PPL
                                    </button>
                                  </EuiLink>
                                </div>
                              </EuiFormControlLayout>
                            </EuiFieldText>
                          </div>
                        </Autocomplete>
                      </div>
                    </EuiFlexItem>
                    <EuiFlexItem
                      grow={false}
                    >
                      <div
                        className="euiFlexItem euiFlexItem--flexGrowZero"
                      >
                        <EuiSuperDatePicker
                          commonlyUsedRanges={
                            Array [
                              Object {
                                "end": "now/d",
                                "label": "Today",
                                "start": "now/d",
                              },
                              Object {
                                "end": "now/w",
                                "label": "This week",
                                "start": "now/w",
                              },
                              Object {
                                "end": "now/M",
                                "label": "This month",
                                "start": "now/M",
                              },
                              Object {
                                "end": "now/y",
                                "label": "This year",
                                "start": "now/y",
                              },
                              Object {
                                "end": "now-1d/d",
                                "label": "Yesterday",
                                "start": "now-1d/d",
                              },
                              Object {
                                "end": "now",
                                "label": "Week to date",
                                "start": "now/w",
                              },
                              Object {
                                "end": "now",
                                "label": "Month to date",
                                "start": "now/M",
                              },
                              Object {
                                "end": "now",
                                "label": "Year to date",
                                "start": "now/y",
                              },
                            ]
                          }
                          dateFormat=""
                          end="now"
                          isAutoRefreshOnly={false}
                          isDisabled={false}
                          isPaused={true}
                          onTimeChange={[Function]}
                          recentlyUsedRanges={Array []}
                          refreshInterval={0}
                          showUpdateButton={true}
                          start="now-30m"
                          timeFormat="HH:mm"
                        >
                          <EuiFlexGroup
                            className="euiSuperDatePicker__flexWrapper"
                            gutterSize="s"
                            responsive={false}
                          >
                            <div
                              className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiSuperDatePicker__flexWrapper"
                            >
                              <EuiFlexItem>
                                <div
                                  className="euiFlexItem"
                                >
                                  <EuiFormControlLayout
                                    className="euiSuperDatePicker"
                                    isDisabled={false}
                                    prepend={
                                      <EuiQuickSelectPopover
                                        applyTime={[Function]}
                                        commonlyUsedRanges={
                                          Array [
                                            Object {
                                              "end": "now/d",
                                              "label": "Today",
                                              "start": "now/d",
                                            },
                                            Object {
                                              "end": "now/w",
                                              "label": "This week",
                                              "start": "now/w",
                                            },
                                            Object {
                                              "end": "now/M",
                                              "label": "This month",
                                              "start": "now/M",
                                            },
                                            Object {
                                              "end": "now/y",
                                              "label": "This year",
                                              "start": "now/y",
                                            },
                                            Object {
                                              "end": "now-1d/d",
                                              "label": "Yesterday",
                                              "start": "now-1d/d",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Week to date",
                                              "start": "now/w",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Month to date",
                                              "start": "now/M",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Year to date",
                                              "start": "now/y",
                                            },
                                          ]
                                        }
                                        dateFormat=""
                                        end="now"
                                        isAutoRefreshOnly={false}
                                        isDisabled={false}
                                        isPaused={true}
                                        recentlyUsedRanges={Array []}
                                        refreshInterval={0}
                                        start="now-30m"
                                      />
                                    }
                                  >
                                    <div
                                      className="euiFormControlLayout euiFormControlLayout--group euiSuperDatePicker"
                                    >
                                      <EuiQuickSelectPopover
                                        applyTime={[Function]}
                                        className="euiFormControlLayout__prepend"
                                        commonlyUsedRanges={
                                          Array [
                                            Object {
                                              "end": "now/d",
                                              "label": "Today",
                                              "start": "now/d",
                                            },
                                            Object {
                                              "end": "now/w",
                                              "label": "This week",
                                              "start": "now/w",
                                            },
                                            Object {
                                              "end": "now/M",
                                              "label": "This month",
                                              "start": "now/M",
                                            },
                                            Object {
                                              "end": "now/y",
                                              "label": "This year",
                                              "start": "now/y",
                                            },
                                            Object {
                                              "end": "now-1d/d",
                                              "label": "Yesterday",
                                              "start": "now-1d/d",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Week to date",
                                              "start": "now/w",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Month to date",
                                              "start": "now/M",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Year to date",
                                              "start": "now/y",
                                            },
                                          ]
                                        }
                                        dateFormat=""
                                        end="now"
                                        isAutoRefreshOnly={false}
                                        isDisabled={false}
                                        isPaused={true}
                                        key="0/.0"
                                        recentlyUsedRanges={Array []}
                                        refreshInterval={0}
                                        start="now-30m"
                                      >
                                        <EuiPopover
                                          anchorClassName="euiQuickSelectPopover__anchor"
                                          anchorPosition="downLeft"
                                          button={
                                            <EuiButtonEmpty
                                              aria-label="Date quick select"
                                              className="euiFormControlLayout__prepend"
                                              data-test-subj="superDatePickerToggleQuickMenuButton"
                                              iconSide="right"
                                              iconType="arrowDown"
                                              isDisabled={false}
                                              onClick={[Function]}
                                              size="xs"
                                              textProps={
                                                Object {
                                                  "className": "euiQuickSelectPopover__buttonText",
                                                }
                                              }
                                            >
                                              <EuiIcon
                                                type="calendar"
                                              />
                                            </EuiButtonEmpty>
                                          }
                                          closePopover={[Function]}
                                          display="inlineBlock"
                                          hasArrow={true}
                                          isOpen={false}
                                          ownFocus={true}
                                          panelPaddingSize="m"
                                        >
                                          <div
                                            className="euiPopover euiPopover--anchorDownLeft"
                                          >
                                            <div
                                              className="euiPopover__anchor euiQuickSelectPopover__anchor"
                                            >
                                              <EuiButtonEmpty
                                                aria-label="Date quick select"
                                                className="euiFormControlLayout__prepend"
                                                data-test-subj="superDatePickerToggleQuickMenuButton"
                                                iconSide="right"
                                                iconType="arrowDown"
                                                isDisabled={false}
                                                onClick={[Function]}
                                                size="xs"
                                                textProps={
                                                  Object {
                                                    "className": "euiQuickSelectPopover__buttonText",
                                                  }
                                                }
                                              >
                                                <button
                                                  aria-label="Date quick select"
                                                  className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiFormControlLayout__prepend"
                                                  data-test-subj="superDatePickerToggleQuickMenuButton"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                  type="button"
                                                >
                                                  <EuiButtonContent
                                                    className="euiButtonEmpty__content"
                                                    iconSide="right"
                                                    iconSize="s"
                                                    iconType="arrowDown"
                                                    textProps={
                                                      Object {
                                                        "className": "euiButtonEmpty__text euiQuickSelectPopover__buttonText",
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                    >
                                                      <EuiIcon
                                                        className="euiButtonContent__icon"
                                                        color="inherit"
                                                        size="s"
                                                        type="arrowDown"
                                                      >
                                                        <EuiIconArrowDown
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                          focusable="false"
                                                          role="img"
                                                          style={null}
                                                        >
                                                          <svg
                                                            aria-hidden={true}
                                                            className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                            focusable="false"
                                                            height={16}
                                                            role="img"
                                                            style={null}
                                                            viewBox="0 0 16 16"
                                                            width={16}
                                                            xmlns="http://www.w3.org/2000/svg"
                                                          >
                                                            <path
                                                              d="M13.069 5.157L8.384 9.768a.546.546 0 01-.768 0L2.93 5.158a.552.552 0 00-.771 0 .53.53 0 000 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 000-.76.552.552 0 00-.771 0z"
                                                              fillRule="non-zero"
                                                            />
                                                          </svg>
                                                        </EuiIconArrowDown>
                                                      </EuiIcon>
                                                      <span
                                                        className="euiButtonEmpty__text euiQuickSelectPopover__buttonText"
                                                      >
                                                        <EuiIcon
                                                          type="calendar"
                                                        >
                                                          <EuiIconCalendar
                                                            aria-hidden={true}
                                                            className="euiIcon euiIcon--medium"
                                                            focusable="false"
                                                            role="img"
                                                            style={null}
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              className="euiIcon euiIcon--medium"
                                                              focusable="false"
                                                              height={16}
                                                              role="img"
                                                              style={null}
                                                              viewBox="0 0 16 16"
                                                              width={16}
                                                              xmlns="http://www.w3.org/2000/svg"
                                                            >
                                                              <path
                                                                d="M14 4v-.994C14 2.45 13.55 2 12.994 2H11v1h-1V2H6v1H5V2H3.006C2.45 2 2 2.45 2 3.006v9.988C2 13.55 2.45 14 3.006 14h9.988C13.55 14 14 13.55 14 12.994V5H2V4h12zm-3-3h1.994C14.102 1 15 1.897 15 3.006v9.988A2.005 2.005 0 0112.994 15H3.006A2.005 2.005 0 011 12.994V3.006C1 1.898 1.897 1 3.006 1H5V0h1v1h4V0h1v1zM4 7h2v1H4V7zm3 0h2v1H7V7zm3 0h2v1h-2V7zM4 9h2v1H4V9zm3 0h2v1H7V9zm3 0h2v1h-2V9zm-6 2h2v1H4v-1zm3 0h2v1H7v-1zm3 0h2v1h-2v-1z"
                                                                fillRule="evenodd"
                                                              />
                                                            </svg>
                                                          </EuiIconCalendar>
                                                        </EuiIcon>
                                                      </span>
                                                    </span>
                                                  </EuiButtonContent>
                                                </button>
                                              </EuiButtonEmpty>
                                            </div>
                                          </div>
                                        </EuiPopover>
                                      </EuiQuickSelectPopover>
                                      <div
                                        className="euiFormControlLayout__childrenWrapper"
                                      >
                                        <EuiDatePickerRange
                                          className="euiDatePickerRange--inGroup"
                                          endDateControl={<div />}
                                          iconType={false}
                                          isCustom={true}
                                          startDateControl={<div />}
                                        >
                                          <div
                                            className="euiDatePickerRange euiDatePickerRange--inGroup"
                                          >
                                            <button
                                              className="euiSuperDatePicker__prettyFormat"
                                              data-test-subj="superDatePickerShowDatesButton"
                                              disabled={false}
                                              onClick={[Function]}
                                            >
                                              Last 30 minutes
                                              <span
                                                className="euiSuperDatePicker__prettyFormatLink"
                                              >
                                                <EuiI18n
                                                  default="Show dates"
                                                  token="euiSuperDatePicker.showDatesButtonLabel"
                                                >
                                                  Show dates
                                                </EuiI18n>
                                              </span>
                                            </button>
                                          </div>
                                        </EuiDatePickerRange>
                                        <EuiFormControlLayoutIcons />
                                      </div>
                                    </div>
                                  </EuiFormControlLayout>
                                </div>
                              </EuiFlexItem>
                              <EuiFlexItem
                                grow={false}
                              >
                                <div
                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                >
                                  <EuiSuperUpdateButton
                                    data-test-subj="superDatePickerApplyTimeButton"
                                    isDisabled={false}
                                    isLoading={false}
                                    needsUpdate={false}
                                    onClick={[Function]}
                                    showTooltip={true}
                                  >
                                    <EuiToolTip
                                      delay="regular"
                                      position="bottom"
                                    >
                                      <span
                                        className="euiToolTipAnchor"
                                        onKeyUp={[Function]}
                                        onMouseOut={[Function]}
                                        onMouseOver={[Function]}
                                      >
                                        <EuiButton
                                          className="euiSuperUpdateButton"
                                          color="primary"
                                          data-test-subj="superDatePickerApplyTimeButton"
                                          fill={true}
                                          iconType="refresh"
                                          isDisabled={false}
                                          isLoading={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          textProps={
                                            Object {
                                              "className": "euiSuperUpdateButton__text",
                                            }
                                          }
                                        >
                                          <EuiButtonDisplay
                                            baseClassName="euiButton"
                                            className="euiSuperUpdateButton"
                                            color="primary"
                                            data-test-subj="superDatePickerApplyTimeButton"
                                            disabled={false}
                                            element="button"
                                            fill={true}
                                            iconType="refresh"
                                            isDisabled={false}
                                            isLoading={false}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onFocus={[Function]}
                                            textProps={
                                              Object {
                                                "className": "euiSuperUpdateButton__text",
                                              }
                                            }
                                            type="button"
                                          >
                                            <button
                                              className="euiButton euiButton--primary euiButton--fill euiSuperUpdateButton"
                                              data-test-subj="superDatePickerApplyTimeButton"
                                              disabled={false}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onFocus={[Function]}
                                              style={
                                                Object {
                                                  "minWidth": undefined,
                                                }
                                              }
                                              type="button"
                                            >
                                              <EuiButtonContent
                                                className="euiButton__content"
                                                iconSide="left"
                                                iconType="refresh"
                                                isLoading={false}
                                                textProps={
                                                  Object {
                                                    "className": "euiButton__text euiSuperUpdateButton__text",
                                                  }
                                                }
                                              >
                                                <span
                                                  className="euiButtonContent euiButton__content"
                                                >
                                                  <EuiIcon
                                                    className="euiButtonContent__icon"
                                                    color="inherit"
                                                    size="m"
                                                    type="refresh"
                                                  >
                                                    <EuiIconRefresh
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                                      focusable="false"
                                                      role="img"
                                                      style={null}
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                                        focusable="false"
                                                        height={16}
                                                        role="img"
                                                        style={null}
                                                        viewBox="0 0 16 16"
                                                        width={16}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <path
                                                          d="M11.228 2.942a.5.5 0 11-.538.842A5 5 0 1013 8a.5.5 0 111 0 6 6 0 11-2.772-5.058zM14 1.5v3A1.5 1.5 0 0112.5 6h-3a.5.5 0 010-1h3a.5.5 0 00.5-.5v-3a.5.5 0 111 0z"
                                                        />
                                                      </svg>
                                                    </EuiIconRefresh>
                                                  </EuiIcon>
                                                  <span
                                                    className="euiButton__text euiSuperUpdateButton__text"
                                                  >
                                                    <EuiI18n
                                                      default="Refresh"
                                                      token="euiSuperUpdateButton.refreshButtonLabel"
                                                    >
                                                      Refresh
                                                    </EuiI18n>
                                                  </span>
                                                </span>
                                              </EuiButtonContent>
                                            </button>
                                          </EuiButtonDisplay>
                                        </EuiButton>
                                      </span>
                                    </EuiToolTip>
                                  </EuiSuperUpdateButton>
                                </div>
                              </EuiFlexItem>
                            </div>
                          </EuiFlexGroup>
                        </EuiSuperDatePicker>
                      </div>
                    </EuiFlexItem>
                  </div>
                </EuiFlexGroup>
                <EuiSpacer
                  size="l"
                >
                  <div
                    className="euiSpacer euiSpacer--l"
                  />
                </EuiSpacer>
                <EmptyPanelView
                  addVizDisabled={false}
                  showFlyout={[Function]}
                >
                  <div>
                    <EuiSpacer
                      size="xxl"
                    >
                      <div
                        className="euiSpacer euiSpacer--xxl"
                      />
                    </EuiSpacer>
                    <EuiText
                      data-test-subj="addFirstVisualizationText"
                      textAlign="center"
                    >
                      <div
                        className="euiText euiText--medium"
                        data-test-subj="addFirstVisualizationText"
                      >
                        <EuiTextAlign
                          textAlign="center"
                        >
                          <div
                            className="euiTextAlign euiTextAlign--center"
                          >
                            <h2>
                              Start by adding your first visualization
                            </h2>
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <EuiText
                              color="subdued"
                              size="m"
                            >
                              <div
                                className="euiText euiText--medium"
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    Use PPL Queries to fetch & filter observability data and create visualizations
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </EuiTextAlign>
                      </div>
                    </EuiText>
                    <EuiSpacer
                      size="m"
                    >
                      <div
                        className="euiSpacer euiSpacer--m"
                      />
                    </EuiSpacer>
                    <EuiFlexGroup
                      justifyContent="center"
                    >
                      <div
                        className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                      >
                        <EuiFlexItem
                          grow={false}
                        >
                          <div
                            className="euiFlexItem euiFlexItem--flexGrowZero"
                          >
                            <AddVisualizationPopover
                              addVizDisabled={false}
                              showFlyout={[Function]}
                            >
                              <EuiPopover
                                anchorPosition="downLeft"
                                button={
                                  <EuiButton
                                    data-test-subj="addVisualizationButton"
                                    disabled={false}
                                    iconSide="right"
                                    iconType="arrowDown"
                                    onClick={[Function]}
                                  >
                                    Add visualization
                                  </EuiButton>
                                }
                                closePopover={[Function]}
                                display="inlineBlock"
                                hasArrow={true}
                                id="addVisualizationContextMenu"
                                isOpen={false}
                                ownFocus={true}
                                panelPaddingSize="none"
                              >
                                <div
                                  className="euiPopover euiPopover--anchorDownLeft"
                                  id="addVisualizationContextMenu"
                                >
                                  <div
                                    className="euiPopover__anchor"
                                  >
                                    <EuiButton
                                      data-test-subj="addVisualizationButton"
                                      disabled={false}
                                      iconSide="right"
                                      iconType="arrowDown"
                                      onClick={[Function]}
                                    >
                                      <EuiButtonDisplay
                                        baseClassName="euiButton"
                                        data-test-subj="addVisualizationButton"
                                        disabled={false}
                                        element="button"
                                        iconSide="right"
                                        iconType="arrowDown"
                                        isDisabled={false}
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          className="euiButton euiButton--primary"
                                          data-test-subj="addVisualizationButton"
                                          disabled={false}
                                          onClick={[Function]}
                                          style={
                                            Object {
                                              "minWidth": undefined,
                                            }
                                          }
                                          type="button"
                                        >
                                          <EuiButtonContent
                                            className="euiButton__content"
                                            iconSide="right"
                                            iconType="arrowDown"
                                            textProps={
                                              Object {
                                                "className": "euiButton__text",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiButtonContent euiButtonContent--iconRight euiButton__content"
                                            >
                                              <EuiIcon
                                                className="euiButtonContent__icon"
                                                color="inherit"
                                                size="m"
                                                type="arrowDown"
                                              >
                                                <EuiIconArrowDown
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      d="M13.069 5.157L8.384 9.768a.546.546 0 01-.768 0L2.93 5.158a.552.552 0 00-.771 0 .53.53 0 000 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 000-.76.552.552 0 00-.771 0z"
                                                      fillRule="non-zero"
                                                    />
                                                  </svg>
                                                </EuiIconArrowDown>
                                              </EuiIcon>
                                              <span
                                                className="euiButton__text"
                                              >
                                                Add visualization
                                              </span>
                                            </span>
                                          </EuiButtonContent>
                                        </button>
                                      </EuiButtonDisplay>
                                    </EuiButton>
                                  </div>
                                </div>
                              </EuiPopover>
                            </AddVisualizationPopover>
                          </div>
                        </EuiFlexItem>
                      </div>
                    </EuiFlexGroup>
                    <EuiSpacer
                      size="xxl"
                    >
                      <div
                        className="euiSpacer euiSpacer--xxl"
                      />
                    </EuiSpacer>
                  </div>
                </EmptyPanelView>
                <PanelGrid
                  chrome={
                    Object {
                      "getIsNavDrawerLocked$": [MockFunction] {
                        "calls": Array [
                          Array [],
                          Array [],
                          Array [],
                          Array [],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": Observable {
                              "_isScalar": false,
                              "_subscribe": [Function],
                            },
                          },
                          Object {
                            "type": "return",
                            "value": Observable {
                              "_isScalar": false,
                              "_subscribe": [Function],
                            },
                          },
                          Object {
                            "type": "return",
                            "value": Observable {
                              "_isScalar": false,
                              "_subscribe": [Function],
                            },
                          },
                          Object {
                            "type": "return",
                            "value": Observable {
                              "_isScalar": false,
                              "_subscribe": [Function],
                            },
                          },
                        ],
                      },
                      "setBreadcrumbs": [MockFunction] {
                        "calls": Array [
                          Array [
                            Array [
                              Object {
                                "href": "#/operational_panels/",
                                "text": "Operational panels",
                              },
                              Object {
                                "href": "observability#/",
                                "text": "Observability",
                              },
                              Object {
                                "href": "observability#/L8Sx53wBDp0rvEg3yoLb",
                                "text": "",
                              },
                            ],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                    }
                  }
                  cloneVisualization={[Function]}
                  editActionType=""
                  editMode={false}
                  endTime="now"
                  http={[MockFunction]}
                  onEditClick={[Function]}
                  onRefresh={false}
                  panelId="L8Sx53wBDp0rvEg3yoLb"
                  panelVisualizations={Array []}
                  pplFilterValue=""
                  pplService={
                    PPLService {
                      "fetch": [Function],
                      "http": [MockFunction],
                    }
                  }
                  setPanelVisualizations={[Function]}
                  showFlyout={[Function]}
                  startTime="now-30m"
                >
                  <WidthProvider
                    breakpoints={
                      Object {
                        "lg": 1200,
                        "md": 996,
                        "sm": 768,
                        "xs": 480,
                        "xxs": 0,
                      }
                    }
                    className="layout full-width"
                    cols={
                      Object {
                        "lg": 12,
                        "md": 12,
                        "sm": 12,
                        "xs": 1,
                        "xxs": 1,
                      }
                    }
                    layouts={
                      Object {
                        "lg": Array [],
                        "md": Array [],
                        "sm": Array [],
                      }
                    }
                    measureBeforeMount={false}
                    onLayoutChange={[Function]}
                  >
                    <ResponsiveReactGridLayout
                      breakpoints={
                        Object {
                          "lg": 1200,
                          "md": 996,
                          "sm": 768,
                          "xs": 480,
                          "xxs": 0,
                        }
                      }
                      className="layout full-width"
                      cols={
                        Object {
                          "lg": 12,
                          "md": 12,
                          "sm": 12,
                          "xs": 1,
                          "xxs": 1,
                        }
                      }
                      layouts={
                        Object {
                          "lg": Array [],
                          "md": Array [],
                          "sm": Array [],
                        }
                      }
                      onBreakpointChange={[Function]}
                      onLayoutChange={[Function]}
                      onWidthChange={[Function]}
                      width={0}
                    >
                      <ReactGridLayout
                        autoSize={true}
                        className="layout full-width"
                        cols={1}
                        compactType="vertical"
                        containerPadding={null}
                        draggableCancel=""
                        draggableHandle=""
                        isDraggable={true}
                        isResizable={true}
                        layout={Array []}
                        margin={
                          Array [
                            10,
                            10,
                          ]
                        }
                        maxRows={Infinity}
                        onDrag={[Function]}
                        onDragStart={[Function]}
                        onDragStop={[Function]}
                        onLayoutChange={[Function]}
                        onResize={[Function]}
                        onResizeStart={[Function]}
                        onResizeStop={[Function]}
                        preventCollision={false}
                        rowHeight={150}
                        style={Object {}}
                        useCSSTransforms={true}
                        verticalCompact={true}
                        width={0}
                      >
                        <div
                          className="react-grid-layout layout full-width"
                          style={
                            Object {
                              "height": "10px",
                            }
                          }
                        />
                      </ReactGridLayout>
                    </ResponsiveReactGridLayout>
                  </WidthProvider>
                </PanelGrid>
              </div>
            </EuiPageContentBody>
          </div>
        </EuiPageBody>
      </div>
    </EuiPage>
  </div>
</CustomPanelView>
`;

exports[`Panels View Component renders panel view container without visualizations 1`] = `
<CustomPanelView
  chrome={
    Object {
      "getIsNavDrawerLocked$": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Observable {
              "_isScalar": false,
              "_subscribe": [Function],
            },
          },
          Object {
            "type": "return",
            "value": Observable {
              "_isScalar": false,
              "_subscribe": [Function],
            },
          },
          Object {
            "type": "return",
            "value": Observable {
              "_isScalar": false,
              "_subscribe": [Function],
            },
          },
          Object {
            "type": "return",
            "value": Observable {
              "_isScalar": false,
              "_subscribe": [Function],
            },
          },
        ],
      },
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              Object {
                "href": "#/operational_panels/",
                "text": "Operational panels",
              },
              Object {
                "href": "observability#/",
                "text": "Observability",
              },
              Object {
                "href": "observability#/L8Sx53wBDp0rvEg3yoLb",
                "text": "",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  cloneCustomPanel={[MockFunction]}
  deleteCustomPanel={[MockFunction]}
  dslService={
    DSLService {
      "fetch": [Function],
      "fetchFields": [Function],
      "fetchIndices": [Function],
      "http": [MockFunction],
    }
  }
  endTime="now"
  http={[MockFunction]}
  onEditClick={[Function]}
  page="operationalPanels"
  panelId="L8Sx53wBDp0rvEg3yoLb"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "#/operational_panels/",
        "text": "Operational panels",
      },
      Object {
        "href": "observability#/",
        "text": "Observability",
      },
    ]
  }
  pplService={
    PPLService {
      "fetch": [Function],
      "http": [MockFunction],
    }
  }
  renameCustomPanel={[MockFunction]}
  setEndTime={[MockFunction]}
  setStartTime={[MockFunction]}
  setToast={[MockFunction]}
  startTime="now-30m"
>
  <div>
    <EuiPage
      id="panelView"
    >
      <div
        className="euiPage euiPage--paddingMedium euiPage--grow"
        id="panelView"
      >
        <EuiPageBody
          component="div"
        >
          <div
            className="euiPageBody euiPageBody--borderRadiusNone"
          >
            <EuiPageHeader>
              <header
                className="euiPageHeader euiPageHeader--responsive euiPageHeader--center"
              >
                <EuiPageHeaderSection>
                  <div
                    className="euiPageHeaderSection"
                  >
                    <EuiTitle
                      size="l"
                    >
                      <h1
                        className="euiTitle euiTitle--large"
                      />
                    </EuiTitle>
                    <EuiFlexItem>
                      <div
                        className="euiFlexItem"
                      >
                        <EuiSpacer
                          size="s"
                        >
                          <div
                            className="euiSpacer euiSpacer--s"
                          />
                        </EuiSpacer>
                      </div>
                    </EuiFlexItem>
                    Created on 
                    Invalid date
                  </div>
                </EuiPageHeaderSection>
                <EuiPageHeaderSection>
                  <div
                    className="euiPageHeaderSection"
                  >
                    <EuiFlexGroup
                      gutterSize="s"
                    >
                      <div
                        className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiFlexGroup--responsive"
                      >
                        <EuiFlexItem>
                          <div
                            className="euiFlexItem"
                          >
                            <EuiButton
                              disabled={true}
                              iconType="pencil"
                              onClick={[Function]}
                            >
                              <EuiButtonDisplay
                                baseClassName="euiButton"
                                disabled={true}
                                element="button"
                                iconType="pencil"
                                isDisabled={true}
                                onClick={[Function]}
                                type="button"
                              >
                                <button
                                  className="euiButton euiButton--primary euiButton-isDisabled"
                                  disabled={true}
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "minWidth": undefined,
                                    }
                                  }
                                  type="button"
                                >
                                  <EuiButtonContent
                                    className="euiButton__content"
                                    iconSide="left"
                                    iconType="pencil"
                                    textProps={
                                      Object {
                                        "className": "euiButton__text",
                                      }
                                    }
                                  >
                                    <span
                                      className="euiButtonContent euiButton__content"
                                    >
                                      <EuiIcon
                                        className="euiButtonContent__icon"
                                        color="inherit"
                                        size="m"
                                        type="pencil"
                                      >
                                        <EuiIconEmpty
                                          aria-hidden={true}
                                          className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                          focusable="false"
                                          role="img"
                                          style={null}
                                        >
                                          <svg
                                            aria-hidden={true}
                                            className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                            focusable="false"
                                            height={16}
                                            role="img"
                                            style={null}
                                            viewBox="0 0 16 16"
                                            width={16}
                                            xmlns="http://www.w3.org/2000/svg"
                                          />
                                        </EuiIconEmpty>
                                      </EuiIcon>
                                      <span
                                        className="euiButton__text"
                                      >
                                        Edit
                                      </span>
                                    </span>
                                  </EuiButtonContent>
                                </button>
                              </EuiButtonDisplay>
                            </EuiButton>
                          </div>
                        </EuiFlexItem>
                        <EuiFlexItem
                          grow={false}
                        >
                          <div
                            className="euiFlexItem euiFlexItem--flexGrowZero"
                          >
                            <EuiPopover
                              anchorPosition="downCenter"
                              button={
                                <EuiButton
                                  disabled={false}
                                  iconSide="right"
                                  iconType="arrowDown"
                                  onClick={[Function]}
                                >
                                  Panel actions
                                </EuiButton>
                              }
                              closePopover={[Function]}
                              display="inlineBlock"
                              hasArrow={true}
                              isOpen={false}
                              ownFocus={true}
                              panelPaddingSize="none"
                              withTitle={true}
                            >
                              <div
                                className="euiPopover euiPopover--anchorDownCenter"
                                withTitle={true}
                              >
                                <div
                                  className="euiPopover__anchor"
                                >
                                  <EuiButton
                                    disabled={false}
                                    iconSide="right"
                                    iconType="arrowDown"
                                    onClick={[Function]}
                                  >
                                    <EuiButtonDisplay
                                      baseClassName="euiButton"
                                      disabled={false}
                                      element="button"
                                      iconSide="right"
                                      iconType="arrowDown"
                                      isDisabled={false}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <button
                                        className="euiButton euiButton--primary"
                                        disabled={false}
                                        onClick={[Function]}
                                        style={
                                          Object {
                                            "minWidth": undefined,
                                          }
                                        }
                                        type="button"
                                      >
                                        <EuiButtonContent
                                          className="euiButton__content"
                                          iconSide="right"
                                          iconType="arrowDown"
                                          textProps={
                                            Object {
                                              "className": "euiButton__text",
                                            }
                                          }
                                        >
                                          <span
                                            className="euiButtonContent euiButtonContent--iconRight euiButton__content"
                                          >
                                            <EuiIcon
                                              className="euiButtonContent__icon"
                                              color="inherit"
                                              size="m"
                                              type="arrowDown"
                                            >
                                              <EuiIconEmpty
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                focusable="false"
                                                role="img"
                                                style={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                  focusable="false"
                                                  height={16}
                                                  role="img"
                                                  style={null}
                                                  viewBox="0 0 16 16"
                                                  width={16}
                                                  xmlns="http://www.w3.org/2000/svg"
                                                />
                                              </EuiIconEmpty>
                                            </EuiIcon>
                                            <span
                                              className="euiButton__text"
                                            >
                                              Panel actions
                                            </span>
                                          </span>
                                        </EuiButtonContent>
                                      </button>
                                    </EuiButtonDisplay>
                                  </EuiButton>
                                </div>
                              </div>
                            </EuiPopover>
                          </div>
                        </EuiFlexItem>
                        <EuiFlexItem
                          grow={false}
                        >
                          <div
                            className="euiFlexItem euiFlexItem--flexGrowZero"
                          >
                            <AddVisualizationPopover
                              addVizDisabled={false}
                              showFlyout={[Function]}
                            >
                              <EuiPopover
                                anchorPosition="downLeft"
                                button={
                                  <EuiButton
                                    data-test-subj="addVisualizationButton"
                                    disabled={false}
                                    iconSide="right"
                                    iconType="arrowDown"
                                    onClick={[Function]}
                                  >
                                    Add visualization
                                  </EuiButton>
                                }
                                closePopover={[Function]}
                                display="inlineBlock"
                                hasArrow={true}
                                id="addVisualizationContextMenu"
                                isOpen={false}
                                ownFocus={true}
                                panelPaddingSize="none"
                              >
                                <div
                                  className="euiPopover euiPopover--anchorDownLeft"
                                  id="addVisualizationContextMenu"
                                >
                                  <div
                                    className="euiPopover__anchor"
                                  >
                                    <EuiButton
                                      data-test-subj="addVisualizationButton"
                                      disabled={false}
                                      iconSide="right"
                                      iconType="arrowDown"
                                      onClick={[Function]}
                                    >
                                      <EuiButtonDisplay
                                        baseClassName="euiButton"
                                        data-test-subj="addVisualizationButton"
                                        disabled={false}
                                        element="button"
                                        iconSide="right"
                                        iconType="arrowDown"
                                        isDisabled={false}
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          className="euiButton euiButton--primary"
                                          data-test-subj="addVisualizationButton"
                                          disabled={false}
                                          onClick={[Function]}
                                          style={
                                            Object {
                                              "minWidth": undefined,
                                            }
                                          }
                                          type="button"
                                        >
                                          <EuiButtonContent
                                            className="euiButton__content"
                                            iconSide="right"
                                            iconType="arrowDown"
                                            textProps={
                                              Object {
                                                "className": "euiButton__text",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiButtonContent euiButtonContent--iconRight euiButton__content"
                                            >
                                              <EuiIcon
                                                className="euiButtonContent__icon"
                                                color="inherit"
                                                size="m"
                                                type="arrowDown"
                                              >
                                                <EuiIconEmpty
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  />
                                                </EuiIconEmpty>
                                              </EuiIcon>
                                              <span
                                                className="euiButton__text"
                                              >
                                                Add visualization
                                              </span>
                                            </span>
                                          </EuiButtonContent>
                                        </button>
                                      </EuiButtonDisplay>
                                    </EuiButton>
                                  </div>
                                </div>
                              </EuiPopover>
                            </AddVisualizationPopover>
                          </div>
                        </EuiFlexItem>
                      </div>
                    </EuiFlexGroup>
                  </div>
                </EuiPageHeaderSection>
              </header>
            </EuiPageHeader>
            <EuiPageContentBody>
              <div
                className="euiPageContentBody"
              >
                <EuiFlexGroup
                  gutterSize="s"
                >
                  <div
                    className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiFlexGroup--responsive"
                  >
                    <EuiFlexItem>
                      <div
                        className="euiFlexItem"
                      >
                        <Autocomplete
                          append={
                            <EuiLink
                              aria-label="ppl-info"
                              onClick={[Function]}
                              style={
                                Object {
                                  "padding": "10px",
                                }
                              }
                            >
                              PPL
                            </EuiLink>
                          }
                          baseQuery="source = "
                          dslService={
                            DSLService {
                              "fetch": [Function],
                              "fetchFields": [Function],
                              "fetchIndices": [Function],
                              "http": [MockFunction],
                            }
                          }
                          getSuggestions={[Function]}
                          handleQueryChange={[Function]}
                          handleQuerySearch={[Function]}
                          isDisabled={true}
                          key="autocomplete-search-bar"
                          onItemSelect={[Function]}
                          placeholder="Use PPL 'where' clauses to add filters on all visualizations [where Carrier = 'OpenSearch-Air']"
                          possibleCommands={
                            Array [
                              Object {
                                "label": "where",
                              },
                            ]
                          }
                          query=""
                          tabId="panels-filter"
                          tempQuery=""
                        >
                          <div
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-labelledby="autocomplete-1-label"
                            className="aa-Autocomplete"
                            id="autocomplete-root"
                            role="combobox"
                          >
                            <EuiFieldText
                              append={
                                <EuiLink
                                  aria-label="ppl-info"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "padding": "10px",
                                    }
                                  }
                                >
                                  PPL
                                </EuiLink>
                              }
                              aria-autocomplete="both"
                              aria-labelledby="autocomplete-1-label"
                              autoCapitalize="off"
                              autoComplete="off"
                              autoCorrect="off"
                              autoFocus={false}
                              data-test-subj="searchAutocompleteTextArea"
                              disabled={true}
                              enterKeyHint="search"
                              fullWidth={true}
                              id="autocomplete-textarea"
                              maxLength={512}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onClick={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              placeholder="Use PPL 'where' clauses to add filters on all visualizations [where Carrier = 'OpenSearch-Air']"
                              spellCheck="false"
                              type="search"
                              value=""
                            >
                              <EuiFormControlLayout
                                append={
                                  <EuiLink
                                    aria-label="ppl-info"
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "padding": "10px",
                                      }
                                    }
                                  >
                                    PPL
                                  </EuiLink>
                                }
                                fullWidth={true}
                                inputId="autocomplete-textarea"
                              >
                                <div
                                  className="euiFormControlLayout euiFormControlLayout--fullWidth euiFormControlLayout--group"
                                >
                                  <div
                                    className="euiFormControlLayout__childrenWrapper"
                                  >
                                    <EuiValidatableControl>
                                      <input
                                        aria-autocomplete="both"
                                        aria-labelledby="autocomplete-1-label"
                                        autoCapitalize="off"
                                        autoComplete="off"
                                        autoCorrect="off"
                                        autoFocus={false}
                                        className="euiFieldText euiFieldText--fullWidth euiFieldText--inGroup"
                                        data-test-subj="searchAutocompleteTextArea"
                                        disabled={true}
                                        enterKeyHint="search"
                                        id="autocomplete-textarea"
                                        maxLength={512}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        placeholder="Use PPL 'where' clauses to add filters on all visualizations [where Carrier = 'OpenSearch-Air']"
                                        spellCheck="false"
                                        type="search"
                                        value=""
                                      />
                                    </EuiValidatableControl>
                                    <EuiFormControlLayoutIcons />
                                  </div>
                                  <EuiLink
                                    aria-label="ppl-info"
                                    className="euiFormControlLayout__append"
                                    key="0/.0"
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "padding": "10px",
                                      }
                                    }
                                  >
                                    <button
                                      aria-label="ppl-info"
                                      className="euiLink euiLink--primary euiFormControlLayout__append"
                                      disabled={false}
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "padding": "10px",
                                        }
                                      }
                                      type="button"
                                    >
                                      PPL
                                    </button>
                                  </EuiLink>
                                </div>
                              </EuiFormControlLayout>
                            </EuiFieldText>
                          </div>
                        </Autocomplete>
                      </div>
                    </EuiFlexItem>
                    <EuiFlexItem
                      grow={false}
                    >
                      <div
                        className="euiFlexItem euiFlexItem--flexGrowZero"
                      >
                        <EuiSuperDatePicker
                          commonlyUsedRanges={
                            Array [
                              Object {
                                "end": "now/d",
                                "label": "Today",
                                "start": "now/d",
                              },
                              Object {
                                "end": "now/w",
                                "label": "This week",
                                "start": "now/w",
                              },
                              Object {
                                "end": "now/M",
                                "label": "This month",
                                "start": "now/M",
                              },
                              Object {
                                "end": "now/y",
                                "label": "This year",
                                "start": "now/y",
                              },
                              Object {
                                "end": "now-1d/d",
                                "label": "Yesterday",
                                "start": "now-1d/d",
                              },
                              Object {
                                "end": "now",
                                "label": "Week to date",
                                "start": "now/w",
                              },
                              Object {
                                "end": "now",
                                "label": "Month to date",
                                "start": "now/M",
                              },
                              Object {
                                "end": "now",
                                "label": "Year to date",
                                "start": "now/y",
                              },
                            ]
                          }
                          dateFormat=""
                          end="now"
                          isAutoRefreshOnly={false}
                          isDisabled={false}
                          isPaused={true}
                          onTimeChange={[Function]}
                          recentlyUsedRanges={Array []}
                          refreshInterval={0}
                          showUpdateButton={true}
                          start="now-30m"
                          timeFormat="HH:mm"
                        >
                          <EuiFlexGroup
                            className="euiSuperDatePicker__flexWrapper"
                            gutterSize="s"
                            responsive={false}
                          >
                            <div
                              className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiSuperDatePicker__flexWrapper"
                            >
                              <EuiFlexItem>
                                <div
                                  className="euiFlexItem"
                                >
                                  <EuiFormControlLayout
                                    className="euiSuperDatePicker"
                                    isDisabled={false}
                                    prepend={
                                      <EuiQuickSelectPopover
                                        applyTime={[Function]}
                                        commonlyUsedRanges={
                                          Array [
                                            Object {
                                              "end": "now/d",
                                              "label": "Today",
                                              "start": "now/d",
                                            },
                                            Object {
                                              "end": "now/w",
                                              "label": "This week",
                                              "start": "now/w",
                                            },
                                            Object {
                                              "end": "now/M",
                                              "label": "This month",
                                              "start": "now/M",
                                            },
                                            Object {
                                              "end": "now/y",
                                              "label": "This year",
                                              "start": "now/y",
                                            },
                                            Object {
                                              "end": "now-1d/d",
                                              "label": "Yesterday",
                                              "start": "now-1d/d",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Week to date",
                                              "start": "now/w",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Month to date",
                                              "start": "now/M",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Year to date",
                                              "start": "now/y",
                                            },
                                          ]
                                        }
                                        dateFormat=""
                                        end="now"
                                        isAutoRefreshOnly={false}
                                        isDisabled={false}
                                        isPaused={true}
                                        recentlyUsedRanges={Array []}
                                        refreshInterval={0}
                                        start="now-30m"
                                      />
                                    }
                                  >
                                    <div
                                      className="euiFormControlLayout euiFormControlLayout--group euiSuperDatePicker"
                                    >
                                      <EuiQuickSelectPopover
                                        applyTime={[Function]}
                                        className="euiFormControlLayout__prepend"
                                        commonlyUsedRanges={
                                          Array [
                                            Object {
                                              "end": "now/d",
                                              "label": "Today",
                                              "start": "now/d",
                                            },
                                            Object {
                                              "end": "now/w",
                                              "label": "This week",
                                              "start": "now/w",
                                            },
                                            Object {
                                              "end": "now/M",
                                              "label": "This month",
                                              "start": "now/M",
                                            },
                                            Object {
                                              "end": "now/y",
                                              "label": "This year",
                                              "start": "now/y",
                                            },
                                            Object {
                                              "end": "now-1d/d",
                                              "label": "Yesterday",
                                              "start": "now-1d/d",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Week to date",
                                              "start": "now/w",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Month to date",
                                              "start": "now/M",
                                            },
                                            Object {
                                              "end": "now",
                                              "label": "Year to date",
                                              "start": "now/y",
                                            },
                                          ]
                                        }
                                        dateFormat=""
                                        end="now"
                                        isAutoRefreshOnly={false}
                                        isDisabled={false}
                                        isPaused={true}
                                        key="0/.0"
                                        recentlyUsedRanges={Array []}
                                        refreshInterval={0}
                                        start="now-30m"
                                      >
                                        <EuiPopover
                                          anchorClassName="euiQuickSelectPopover__anchor"
                                          anchorPosition="downLeft"
                                          button={
                                            <EuiButtonEmpty
                                              aria-label="Date quick select"
                                              className="euiFormControlLayout__prepend"
                                              data-test-subj="superDatePickerToggleQuickMenuButton"
                                              iconSide="right"
                                              iconType="arrowDown"
                                              isDisabled={false}
                                              onClick={[Function]}
                                              size="xs"
                                              textProps={
                                                Object {
                                                  "className": "euiQuickSelectPopover__buttonText",
                                                }
                                              }
                                            >
                                              <EuiIcon
                                                type="calendar"
                                              />
                                            </EuiButtonEmpty>
                                          }
                                          closePopover={[Function]}
                                          display="inlineBlock"
                                          hasArrow={true}
                                          isOpen={false}
                                          ownFocus={true}
                                          panelPaddingSize="m"
                                        >
                                          <div
                                            className="euiPopover euiPopover--anchorDownLeft"
                                          >
                                            <div
                                              className="euiPopover__anchor euiQuickSelectPopover__anchor"
                                            >
                                              <EuiButtonEmpty
                                                aria-label="Date quick select"
                                                className="euiFormControlLayout__prepend"
                                                data-test-subj="superDatePickerToggleQuickMenuButton"
                                                iconSide="right"
                                                iconType="arrowDown"
                                                isDisabled={false}
                                                onClick={[Function]}
                                                size="xs"
                                                textProps={
                                                  Object {
                                                    "className": "euiQuickSelectPopover__buttonText",
                                                  }
                                                }
                                              >
                                                <button
                                                  aria-label="Date quick select"
                                                  className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiFormControlLayout__prepend"
                                                  data-test-subj="superDatePickerToggleQuickMenuButton"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                  type="button"
                                                >
                                                  <EuiButtonContent
                                                    className="euiButtonEmpty__content"
                                                    iconSide="right"
                                                    iconSize="s"
                                                    iconType="arrowDown"
                                                    textProps={
                                                      Object {
                                                        "className": "euiButtonEmpty__text euiQuickSelectPopover__buttonText",
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                    >
                                                      <EuiIcon
                                                        className="euiButtonContent__icon"
                                                        color="inherit"
                                                        size="s"
                                                        type="arrowDown"
                                                      >
                                                        <EuiIconEmpty
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                          focusable="false"
                                                          role="img"
                                                          style={null}
                                                        >
                                                          <svg
                                                            aria-hidden={true}
                                                            className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                            focusable="false"
                                                            height={16}
                                                            role="img"
                                                            style={null}
                                                            viewBox="0 0 16 16"
                                                            width={16}
                                                            xmlns="http://www.w3.org/2000/svg"
                                                          />
                                                        </EuiIconEmpty>
                                                      </EuiIcon>
                                                      <span
                                                        className="euiButtonEmpty__text euiQuickSelectPopover__buttonText"
                                                      >
                                                        <EuiIcon
                                                          type="calendar"
                                                        >
                                                          <EuiIconEmpty
                                                            aria-hidden={true}
                                                            className="euiIcon euiIcon--medium euiIcon-isLoading"
                                                            focusable="false"
                                                            role="img"
                                                            style={null}
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              className="euiIcon euiIcon--medium euiIcon-isLoading"
                                                              focusable="false"
                                                              height={16}
                                                              role="img"
                                                              style={null}
                                                              viewBox="0 0 16 16"
                                                              width={16}
                                                              xmlns="http://www.w3.org/2000/svg"
                                                            />
                                                          </EuiIconEmpty>
                                                        </EuiIcon>
                                                      </span>
                                                    </span>
                                                  </EuiButtonContent>
                                                </button>
                                              </EuiButtonEmpty>
                                            </div>
                                          </div>
                                        </EuiPopover>
                                      </EuiQuickSelectPopover>
                                      <div
                                        className="euiFormControlLayout__childrenWrapper"
                                      >
                                        <EuiDatePickerRange
                                          className="euiDatePickerRange--inGroup"
                                          endDateControl={<div />}
                                          iconType={false}
                                          isCustom={true}
                                          startDateControl={<div />}
                                        >
                                          <div
                                            className="euiDatePickerRange euiDatePickerRange--inGroup"
                                          >
                                            <button
                                              className="euiSuperDatePicker__prettyFormat"
                                              data-test-subj="superDatePickerShowDatesButton"
                                              disabled={false}
                                              onClick={[Function]}
                                            >
                                              Last 30 minutes
                                              <span
                                                className="euiSuperDatePicker__prettyFormatLink"
                                              >
                                                <EuiI18n
                                                  default="Show dates"
                                                  token="euiSuperDatePicker.showDatesButtonLabel"
                                                >
                                                  Show dates
                                                </EuiI18n>
                                              </span>
                                            </button>
                                          </div>
                                        </EuiDatePickerRange>
                                        <EuiFormControlLayoutIcons />
                                      </div>
                                    </div>
                                  </EuiFormControlLayout>
                                </div>
                              </EuiFlexItem>
                              <EuiFlexItem
                                grow={false}
                              >
                                <div
                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                >
                                  <EuiSuperUpdateButton
                                    data-test-subj="superDatePickerApplyTimeButton"
                                    isDisabled={false}
                                    isLoading={false}
                                    needsUpdate={false}
                                    onClick={[Function]}
                                    showTooltip={true}
                                  >
                                    <EuiToolTip
                                      delay="regular"
                                      position="bottom"
                                    >
                                      <span
                                        className="euiToolTipAnchor"
                                        onKeyUp={[Function]}
                                        onMouseOut={[Function]}
                                        onMouseOver={[Function]}
                                      >
                                        <EuiButton
                                          className="euiSuperUpdateButton"
                                          color="primary"
                                          data-test-subj="superDatePickerApplyTimeButton"
                                          fill={true}
                                          iconType="refresh"
                                          isDisabled={false}
                                          isLoading={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          textProps={
                                            Object {
                                              "className": "euiSuperUpdateButton__text",
                                            }
                                          }
                                        >
                                          <EuiButtonDisplay
                                            baseClassName="euiButton"
                                            className="euiSuperUpdateButton"
                                            color="primary"
                                            data-test-subj="superDatePickerApplyTimeButton"
                                            disabled={false}
                                            element="button"
                                            fill={true}
                                            iconType="refresh"
                                            isDisabled={false}
                                            isLoading={false}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onFocus={[Function]}
                                            textProps={
                                              Object {
                                                "className": "euiSuperUpdateButton__text",
                                              }
                                            }
                                            type="button"
                                          >
                                            <button
                                              className="euiButton euiButton--primary euiButton--fill euiSuperUpdateButton"
                                              data-test-subj="superDatePickerApplyTimeButton"
                                              disabled={false}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onFocus={[Function]}
                                              style={
                                                Object {
                                                  "minWidth": undefined,
                                                }
                                              }
                                              type="button"
                                            >
                                              <EuiButtonContent
                                                className="euiButton__content"
                                                iconSide="left"
                                                iconType="refresh"
                                                isLoading={false}
                                                textProps={
                                                  Object {
                                                    "className": "euiButton__text euiSuperUpdateButton__text",
                                                  }
                                                }
                                              >
                                                <span
                                                  className="euiButtonContent euiButton__content"
                                                >
                                                  <EuiIcon
                                                    className="euiButtonContent__icon"
                                                    color="inherit"
                                                    size="m"
                                                    type="refresh"
                                                  >
                                                    <EuiIconEmpty
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                      focusable="false"
                                                      role="img"
                                                      style={null}
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                        focusable="false"
                                                        height={16}
                                                        role="img"
                                                        style={null}
                                                        viewBox="0 0 16 16"
                                                        width={16}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      />
                                                    </EuiIconEmpty>
                                                  </EuiIcon>
                                                  <span
                                                    className="euiButton__text euiSuperUpdateButton__text"
                                                  >
                                                    <EuiI18n
                                                      default="Refresh"
                                                      token="euiSuperUpdateButton.refreshButtonLabel"
                                                    >
                                                      Refresh
                                                    </EuiI18n>
                                                  </span>
                                                </span>
                                              </EuiButtonContent>
                                            </button>
                                          </EuiButtonDisplay>
                                        </EuiButton>
                                      </span>
                                    </EuiToolTip>
                                  </EuiSuperUpdateButton>
                                </div>
                              </EuiFlexItem>
                            </div>
                          </EuiFlexGroup>
                        </EuiSuperDatePicker>
                      </div>
                    </EuiFlexItem>
                  </div>
                </EuiFlexGroup>
                <EuiSpacer
                  size="l"
                >
                  <div
                    className="euiSpacer euiSpacer--l"
                  />
                </EuiSpacer>
                <EmptyPanelView
                  addVizDisabled={false}
                  showFlyout={[Function]}
                >
                  <div>
                    <EuiSpacer
                      size="xxl"
                    >
                      <div
                        className="euiSpacer euiSpacer--xxl"
                      />
                    </EuiSpacer>
                    <EuiText
                      data-test-subj="addFirstVisualizationText"
                      textAlign="center"
                    >
                      <div
                        className="euiText euiText--medium"
                        data-test-subj="addFirstVisualizationText"
                      >
                        <EuiTextAlign
                          textAlign="center"
                        >
                          <div
                            className="euiTextAlign euiTextAlign--center"
                          >
                            <h2>
                              Start by adding your first visualization
                            </h2>
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <EuiText
                              color="subdued"
                              size="m"
                            >
                              <div
                                className="euiText euiText--medium"
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    Use PPL Queries to fetch & filter observability data and create visualizations
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </EuiTextAlign>
                      </div>
                    </EuiText>
                    <EuiSpacer
                      size="m"
                    >
                      <div
                        className="euiSpacer euiSpacer--m"
                      />
                    </EuiSpacer>
                    <EuiFlexGroup
                      justifyContent="center"
                    >
                      <div
                        className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                      >
                        <EuiFlexItem
                          grow={false}
                        >
                          <div
                            className="euiFlexItem euiFlexItem--flexGrowZero"
                          >
                            <AddVisualizationPopover
                              addVizDisabled={false}
                              showFlyout={[Function]}
                            >
                              <EuiPopover
                                anchorPosition="downLeft"
                                button={
                                  <EuiButton
                                    data-test-subj="addVisualizationButton"
                                    disabled={false}
                                    iconSide="right"
                                    iconType="arrowDown"
                                    onClick={[Function]}
                                  >
                                    Add visualization
                                  </EuiButton>
                                }
                                closePopover={[Function]}
                                display="inlineBlock"
                                hasArrow={true}
                                id="addVisualizationContextMenu"
                                isOpen={false}
                                ownFocus={true}
                                panelPaddingSize="none"
                              >
                                <div
                                  className="euiPopover euiPopover--anchorDownLeft"
                                  id="addVisualizationContextMenu"
                                >
                                  <div
                                    className="euiPopover__anchor"
                                  >
                                    <EuiButton
                                      data-test-subj="addVisualizationButton"
                                      disabled={false}
                                      iconSide="right"
                                      iconType="arrowDown"
                                      onClick={[Function]}
                                    >
                                      <EuiButtonDisplay
                                        baseClassName="euiButton"
                                        data-test-subj="addVisualizationButton"
                                        disabled={false}
                                        element="button"
                                        iconSide="right"
                                        iconType="arrowDown"
                                        isDisabled={false}
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          className="euiButton euiButton--primary"
                                          data-test-subj="addVisualizationButton"
                                          disabled={false}
                                          onClick={[Function]}
                                          style={
                                            Object {
                                              "minWidth": undefined,
                                            }
                                          }
                                          type="button"
                                        >
                                          <EuiButtonContent
                                            className="euiButton__content"
                                            iconSide="right"
                                            iconType="arrowDown"
                                            textProps={
                                              Object {
                                                "className": "euiButton__text",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiButtonContent euiButtonContent--iconRight euiButton__content"
                                            >
                                              <EuiIcon
                                                className="euiButtonContent__icon"
                                                color="inherit"
                                                size="m"
                                                type="arrowDown"
                                              >
                                                <EuiIconEmpty
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  />
                                                </EuiIconEmpty>
                                              </EuiIcon>
                                              <span
                                                className="euiButton__text"
                                              >
                                                Add visualization
                                              </span>
                                            </span>
                                          </EuiButtonContent>
                                        </button>
                                      </EuiButtonDisplay>
                                    </EuiButton>
                                  </div>
                                </div>
                              </EuiPopover>
                            </AddVisualizationPopover>
                          </div>
                        </EuiFlexItem>
                      </div>
                    </EuiFlexGroup>
                    <EuiSpacer
                      size="xxl"
                    >
                      <div
                        className="euiSpacer euiSpacer--xxl"
                      />
                    </EuiSpacer>
                  </div>
                </EmptyPanelView>
                <PanelGrid
                  chrome={
                    Object {
                      "getIsNavDrawerLocked$": [MockFunction] {
                        "calls": Array [
                          Array [],
                          Array [],
                          Array [],
                          Array [],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": Observable {
                              "_isScalar": false,
                              "_subscribe": [Function],
                            },
                          },
                          Object {
                            "type": "return",
                            "value": Observable {
                              "_isScalar": false,
                              "_subscribe": [Function],
                            },
                          },
                          Object {
                            "type": "return",
                            "value": Observable {
                              "_isScalar": false,
                              "_subscribe": [Function],
                            },
                          },
                          Object {
                            "type": "return",
                            "value": Observable {
                              "_isScalar": false,
                              "_subscribe": [Function],
                            },
                          },
                        ],
                      },
                      "setBreadcrumbs": [MockFunction] {
                        "calls": Array [
                          Array [
                            Array [
                              Object {
                                "href": "#/operational_panels/",
                                "text": "Operational panels",
                              },
                              Object {
                                "href": "observability#/",
                                "text": "Observability",
                              },
                              Object {
                                "href": "observability#/L8Sx53wBDp0rvEg3yoLb",
                                "text": "",
                              },
                            ],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                    }
                  }
                  cloneVisualization={[Function]}
                  editActionType=""
                  editMode={false}
                  endTime="now"
                  http={[MockFunction]}
                  onEditClick={[Function]}
                  onRefresh={false}
                  panelId="L8Sx53wBDp0rvEg3yoLb"
                  panelVisualizations={Array []}
                  pplFilterValue=""
                  pplService={
                    PPLService {
                      "fetch": [Function],
                      "http": [MockFunction],
                    }
                  }
                  setPanelVisualizations={[Function]}
                  showFlyout={[Function]}
                  startTime="now-30m"
                >
                  <WidthProvider
                    breakpoints={
                      Object {
                        "lg": 1200,
                        "md": 996,
                        "sm": 768,
                        "xs": 480,
                        "xxs": 0,
                      }
                    }
                    className="layout full-width"
                    cols={
                      Object {
                        "lg": 12,
                        "md": 12,
                        "sm": 12,
                        "xs": 1,
                        "xxs": 1,
                      }
                    }
                    layouts={
                      Object {
                        "lg": Array [],
                        "md": Array [],
                        "sm": Array [],
                      }
                    }
                    measureBeforeMount={false}
                    onLayoutChange={[Function]}
                  >
                    <ResponsiveReactGridLayout
                      breakpoints={
                        Object {
                          "lg": 1200,
                          "md": 996,
                          "sm": 768,
                          "xs": 480,
                          "xxs": 0,
                        }
                      }
                      className="layout full-width"
                      cols={
                        Object {
                          "lg": 12,
                          "md": 12,
                          "sm": 12,
                          "xs": 1,
                          "xxs": 1,
                        }
                      }
                      layouts={
                        Object {
                          "lg": Array [],
                          "md": Array [],
                          "sm": Array [],
                        }
                      }
                      onBreakpointChange={[Function]}
                      onLayoutChange={[Function]}
                      onWidthChange={[Function]}
                      width={0}
                    >
                      <ReactGridLayout
                        autoSize={true}
                        className="layout full-width"
                        cols={1}
                        compactType="vertical"
                        containerPadding={null}
                        draggableCancel=""
                        draggableHandle=""
                        isDraggable={true}
                        isResizable={true}
                        layout={Array []}
                        margin={
                          Array [
                            10,
                            10,
                          ]
                        }
                        maxRows={Infinity}
                        onDrag={[Function]}
                        onDragStart={[Function]}
                        onDragStop={[Function]}
                        onLayoutChange={[Function]}
                        onResize={[Function]}
                        onResizeStart={[Function]}
                        onResizeStop={[Function]}
                        preventCollision={false}
                        rowHeight={150}
                        style={Object {}}
                        useCSSTransforms={true}
                        verticalCompact={true}
                        width={0}
                      >
                        <div
                          className="react-grid-layout layout full-width"
                          style={
                            Object {
                              "height": "10px",
                            }
                          }
                        />
                      </ReactGridLayout>
                    </ResponsiveReactGridLayout>
                  </WidthProvider>
                </PanelGrid>
              </div>
            </EuiPageContentBody>
          </div>
        </EuiPageBody>
      </div>
    </EuiPage>
  </div>
</CustomPanelView>
`;
