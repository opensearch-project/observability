// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Metrics Grid Component renders Metrics Grid Component 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <MetricsGrid
    chrome={
      Object {
        "getIsNavDrawerLocked$": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
            Array [],
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Observable {
                "_isScalar": false,
                "_subscribe": [Function],
              },
            },
            Object {
              "type": "return",
              "value": Observable {
                "_isScalar": false,
                "_subscribe": [Function],
              },
            },
            Object {
              "type": "return",
              "value": Observable {
                "_isScalar": false,
                "_subscribe": [Function],
              },
            },
            Object {
              "type": "return",
              "value": Observable {
                "_isScalar": false,
                "_subscribe": [Function],
              },
            },
          ],
        },
        "setBreadcrumbs": [MockFunction],
      }
    }
    editActionType="save"
    editMode={false}
    endTime="now"
    http={[MockFunction]}
    moveToEvents={[MockFunction]}
    onRefresh={true}
    panelVisualizations={
      Array [
        Object {
          "h": 2,
          "id": "Y4muP4QBiaYaSxpXk7r8",
          "metricType": "savedCustomMetric",
          "savedVisualizationId": "Y4muP4QBiaYaSxpXk7r8",
          "w": 12,
          "x": 0,
          "y": 0,
        },
        Object {
          "h": 2,
          "id": "tomAP4QBiaYaSxpXALls",
          "metricType": "savedCustomMetric",
          "savedVisualizationId": "tomAP4QBiaYaSxpXALls",
          "w": 12,
          "x": 0,
          "y": 2,
        },
        Object {
          "h": 2,
          "id": "prometheus.process_resident_memory_bytes",
          "metricType": "prometheusMetric",
          "savedVisualizationId": "prometheus.process_resident_memory_bytes",
          "w": 12,
          "x": 0,
          "y": 4,
        },
      ]
    }
    pplService={
      PPLService {
        "fetch": [Function],
        "http": [MockFunction],
      }
    }
    setPanelVisualizations={[MockFunction]}
    spanParam="1h"
    startTime="now-30m"
  >
    <WidthProvider
      breakpoints={
        Object {
          "lg": 1200,
          "md": 996,
          "sm": 768,
          "xs": 480,
          "xxs": 0,
        }
      }
      className="layout full-width"
      cols={
        Object {
          "lg": 12,
          "md": 12,
          "sm": 12,
          "xs": 1,
          "xxs": 1,
        }
      }
      layouts={
        Object {
          "lg": Array [
            Object {
              "h": 2,
              "i": "Y4muP4QBiaYaSxpXk7r8",
              "maxW": 12,
              "minW": 12,
              "static": true,
              "w": 12,
              "x": 0,
              "y": 0,
            },
            Object {
              "h": 2,
              "i": "tomAP4QBiaYaSxpXALls",
              "maxW": 12,
              "minW": 12,
              "static": true,
              "w": 12,
              "x": 0,
              "y": 2,
            },
            Object {
              "h": 2,
              "i": "prometheus.process_resident_memory_bytes",
              "maxW": 12,
              "minW": 12,
              "static": true,
              "w": 12,
              "x": 0,
              "y": 4,
            },
          ],
          "md": Array [
            Object {
              "h": 2,
              "i": "Y4muP4QBiaYaSxpXk7r8",
              "maxW": 12,
              "minW": 12,
              "static": true,
              "w": 12,
              "x": 0,
              "y": 0,
            },
            Object {
              "h": 2,
              "i": "tomAP4QBiaYaSxpXALls",
              "maxW": 12,
              "minW": 12,
              "static": true,
              "w": 12,
              "x": 0,
              "y": 2,
            },
            Object {
              "h": 2,
              "i": "prometheus.process_resident_memory_bytes",
              "maxW": 12,
              "minW": 12,
              "static": true,
              "w": 12,
              "x": 0,
              "y": 4,
            },
          ],
          "sm": Array [
            Object {
              "h": 2,
              "i": "Y4muP4QBiaYaSxpXk7r8",
              "maxW": 12,
              "minW": 12,
              "static": true,
              "w": 12,
              "x": 0,
              "y": 0,
            },
            Object {
              "h": 2,
              "i": "tomAP4QBiaYaSxpXALls",
              "maxW": 12,
              "minW": 12,
              "static": true,
              "w": 12,
              "x": 0,
              "y": 2,
            },
            Object {
              "h": 2,
              "i": "prometheus.process_resident_memory_bytes",
              "maxW": 12,
              "minW": 12,
              "static": true,
              "w": 12,
              "x": 0,
              "y": 4,
            },
          ],
        }
      }
      measureBeforeMount={false}
      onLayoutChange={[Function]}
    >
      <ResponsiveReactGridLayout
        breakpoints={
          Object {
            "lg": 1200,
            "md": 996,
            "sm": 768,
            "xs": 480,
            "xxs": 0,
          }
        }
        className="layout full-width"
        cols={
          Object {
            "lg": 12,
            "md": 12,
            "sm": 12,
            "xs": 1,
            "xxs": 1,
          }
        }
        layouts={
          Object {
            "lg": Array [
              Object {
                "h": 2,
                "i": "Y4muP4QBiaYaSxpXk7r8",
                "maxW": 12,
                "minW": 12,
                "static": true,
                "w": 12,
                "x": 0,
                "y": 0,
              },
              Object {
                "h": 2,
                "i": "tomAP4QBiaYaSxpXALls",
                "maxW": 12,
                "minW": 12,
                "static": true,
                "w": 12,
                "x": 0,
                "y": 2,
              },
              Object {
                "h": 2,
                "i": "prometheus.process_resident_memory_bytes",
                "maxW": 12,
                "minW": 12,
                "static": true,
                "w": 12,
                "x": 0,
                "y": 4,
              },
            ],
            "md": Array [
              Object {
                "h": 2,
                "i": "Y4muP4QBiaYaSxpXk7r8",
                "maxW": 12,
                "minW": 12,
                "static": true,
                "w": 12,
                "x": 0,
                "y": 0,
              },
              Object {
                "h": 2,
                "i": "tomAP4QBiaYaSxpXALls",
                "maxW": 12,
                "minW": 12,
                "static": true,
                "w": 12,
                "x": 0,
                "y": 2,
              },
              Object {
                "h": 2,
                "i": "prometheus.process_resident_memory_bytes",
                "maxW": 12,
                "minW": 12,
                "static": true,
                "w": 12,
                "x": 0,
                "y": 4,
              },
            ],
            "sm": Array [
              Object {
                "h": 2,
                "i": "Y4muP4QBiaYaSxpXk7r8",
                "maxW": 12,
                "minW": 12,
                "static": true,
                "w": 12,
                "x": 0,
                "y": 0,
              },
              Object {
                "h": 2,
                "i": "tomAP4QBiaYaSxpXALls",
                "maxW": 12,
                "minW": 12,
                "static": true,
                "w": 12,
                "x": 0,
                "y": 2,
              },
              Object {
                "h": 2,
                "i": "prometheus.process_resident_memory_bytes",
                "maxW": 12,
                "minW": 12,
                "static": true,
                "w": 12,
                "x": 0,
                "y": 4,
              },
            ],
          }
        }
        onBreakpointChange={[Function]}
        onLayoutChange={[Function]}
        onWidthChange={[Function]}
        width={0}
      >
        <ReactGridLayout
          autoSize={true}
          className="layout full-width"
          cols={1}
          compactType="vertical"
          containerPadding={null}
          draggableCancel=""
          draggableHandle=""
          isDraggable={true}
          isResizable={true}
          layout={
            Array [
              Object {
                "h": 2,
                "i": "Y4muP4QBiaYaSxpXk7r8",
                "isDraggable": undefined,
                "isResizable": undefined,
                "maxH": undefined,
                "maxW": 12,
                "minH": undefined,
                "minW": 12,
                "moved": false,
                "static": true,
                "w": 1,
                "x": 0,
                "y": 0,
              },
              Object {
                "h": 2,
                "i": "tomAP4QBiaYaSxpXALls",
                "isDraggable": undefined,
                "isResizable": undefined,
                "maxH": undefined,
                "maxW": 12,
                "minH": undefined,
                "minW": 12,
                "moved": false,
                "static": true,
                "w": 1,
                "x": 0,
                "y": 2,
              },
              Object {
                "h": 2,
                "i": "prometheus.process_resident_memory_bytes",
                "isDraggable": undefined,
                "isResizable": undefined,
                "maxH": undefined,
                "maxW": 12,
                "minH": undefined,
                "minW": 12,
                "moved": false,
                "static": true,
                "w": 1,
                "x": 0,
                "y": 4,
              },
            ]
          }
          margin={
            Array [
              10,
              10,
            ]
          }
          maxRows={Infinity}
          onDrag={[Function]}
          onDragStart={[Function]}
          onDragStop={[Function]}
          onLayoutChange={[Function]}
          onResize={[Function]}
          onResizeStart={[Function]}
          onResizeStop={[Function]}
          preventCollision={false}
          rowHeight={150}
          style={Object {}}
          useCSSTransforms={true}
          verticalCompact={true}
          width={0}
        >
          <div
            className="react-grid-layout layout full-width"
            style={
              Object {
                "height": "970px",
              }
            }
          >
            <GridItem
              cancel=""
              className=""
              cols={1}
              containerPadding={
                Array [
                  10,
                  10,
                ]
              }
              containerWidth={0}
              h={2}
              handle=""
              i="Y4muP4QBiaYaSxpXk7r8"
              isDraggable={false}
              isResizable={false}
              key=".$Y4muP4QBiaYaSxpXk7r8"
              margin={
                Array [
                  10,
                  10,
                ]
              }
              maxH={Infinity}
              maxRows={Infinity}
              maxW={12}
              minH={1}
              minW={12}
              onDrag={[Function]}
              onDragStart={[Function]}
              onDragStop={[Function]}
              onResize={[Function]}
              onResizeStart={[Function]}
              onResizeStop={[Function]}
              rowHeight={150}
              static={true}
              useCSSTransforms={true}
              usePercentages={false}
              w={1}
              x={0}
              y={0}
            >
              <div
                className="react-grid-item static cssTransforms"
                key="Y4muP4QBiaYaSxpXk7r8"
                style={
                  Object {
                    "MozTransform": "translate(10px,10px)",
                    "OTransform": "translate(10px,10px)",
                    "WebkitTransform": "translate(10px,10px)",
                    "height": "310px",
                    "msTransform": "translate(10px,10px)",
                    "position": "absolute",
                    "transform": "translate(10px,10px)",
                    "width": "-20px",
                  }
                }
              >
                <VisualizationContainer
                  editMode={false}
                  fromTime="now-30m"
                  http={[MockFunction]}
                  key="Y4muP4QBiaYaSxpXk7r8"
                  onEditClick={[MockFunction]}
                  onRefresh={true}
                  pplFilterValue=""
                  pplService={
                    PPLService {
                      "fetch": [Function],
                      "http": [MockFunction],
                    }
                  }
                  removeVisualization={[Function]}
                  savedVisualizationId="Y4muP4QBiaYaSxpXk7r8"
                  spanParam="1h"
                  toTime="now"
                  usedInNotebooks={true}
                  visualizationId="Y4muP4QBiaYaSxpXk7r8"
                >
                  <EuiPanel
                    className="panel-full-width"
                    data-test-subj="VisualizationPanel"
                    grow={false}
                  >
                    <div
                      className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow euiPanel--flexGrowZero panel-full-width"
                      data-test-subj="VisualizationPanel"
                    >
                      <div
                        className=""
                      >
                        <EuiFlexGroup
                          justifyContent="spaceBetween"
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                          >
                            <EuiFlexItem
                              style={
                                Object {
                                  "width": "35%",
                                }
                              }
                            >
                              <div
                                className="euiFlexItem"
                                style={
                                  Object {
                                    "width": "35%",
                                  }
                                }
                              >
                                <EuiText
                                  className="panels-title-text"
                                  grow={false}
                                >
                                  <div
                                    className="euiText euiText--medium panels-title-text euiText--constrainedWidth"
                                  >
                                    <EuiToolTip
                                      content=""
                                      delay="long"
                                      position="top"
                                    >
                                      <span
                                        className="euiToolTipAnchor"
                                        onKeyUp={[Function]}
                                        onMouseOut={[Function]}
                                        onMouseOver={[Function]}
                                      >
                                        <h5
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                        />
                                      </span>
                                    </EuiToolTip>
                                  </div>
                                </EuiText>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem
                              className="visualization-action-button"
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero visualization-action-button"
                              >
                                <EuiPopover
                                  anchorPosition="downLeft"
                                  button={
                                    <EuiButtonIcon
                                      aria-label="actionMenuButton"
                                      iconType="boxesHorizontal"
                                      onClick={[Function]}
                                    />
                                  }
                                  closePopover={[Function]}
                                  display="inlineBlock"
                                  hasArrow={true}
                                  isOpen={false}
                                  ownFocus={true}
                                  panelPaddingSize="m"
                                >
                                  <div
                                    className="euiPopover euiPopover--anchorDownLeft"
                                  >
                                    <div
                                      className="euiPopover__anchor"
                                    >
                                      <EuiButtonIcon
                                        aria-label="actionMenuButton"
                                        iconType="boxesHorizontal"
                                        onClick={[Function]}
                                      >
                                        <button
                                          aria-label="actionMenuButton"
                                          className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <EuiIcon
                                            aria-hidden="true"
                                            className="euiButtonIcon__icon"
                                            color="inherit"
                                            size="m"
                                            type="boxesHorizontal"
                                          >
                                            <EuiIconEmpty
                                              aria-hidden={true}
                                              className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                              focusable="false"
                                              role="img"
                                              style={null}
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                focusable="false"
                                                height={16}
                                                role="img"
                                                style={null}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              />
                                            </EuiIconEmpty>
                                          </EuiIcon>
                                        </button>
                                      </EuiButtonIcon>
                                    </div>
                                  </div>
                                </EuiPopover>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </div>
                      <div
                        className="visualization-div"
                      >
                        <EuiLoadingChart
                          className="visualization-loading-chart"
                          mono={true}
                          size="xl"
                        >
                          <span
                            className="euiLoadingChart euiLoadingChart--mono visualization-loading-chart euiLoadingChart--xLarge"
                          >
                            <span
                              className="euiLoadingChart__bar"
                            />
                            <span
                              className="euiLoadingChart__bar"
                            />
                            <span
                              className="euiLoadingChart__bar"
                            />
                            <span
                              className="euiLoadingChart__bar"
                            />
                          </span>
                        </EuiLoadingChart>
                      </div>
                    </div>
                  </EuiPanel>
                </VisualizationContainer>
              </div>
            </GridItem>
            <GridItem
              cancel=""
              className=""
              cols={1}
              containerPadding={
                Array [
                  10,
                  10,
                ]
              }
              containerWidth={0}
              h={2}
              handle=""
              i="tomAP4QBiaYaSxpXALls"
              isDraggable={false}
              isResizable={false}
              key=".$tomAP4QBiaYaSxpXALls"
              margin={
                Array [
                  10,
                  10,
                ]
              }
              maxH={Infinity}
              maxRows={Infinity}
              maxW={12}
              minH={1}
              minW={12}
              onDrag={[Function]}
              onDragStart={[Function]}
              onDragStop={[Function]}
              onResize={[Function]}
              onResizeStart={[Function]}
              onResizeStop={[Function]}
              rowHeight={150}
              static={true}
              useCSSTransforms={true}
              usePercentages={false}
              w={1}
              x={0}
              y={2}
            >
              <div
                className="react-grid-item static cssTransforms"
                key="tomAP4QBiaYaSxpXALls"
                style={
                  Object {
                    "MozTransform": "translate(10px,330px)",
                    "OTransform": "translate(10px,330px)",
                    "WebkitTransform": "translate(10px,330px)",
                    "height": "310px",
                    "msTransform": "translate(10px,330px)",
                    "position": "absolute",
                    "transform": "translate(10px,330px)",
                    "width": "-20px",
                  }
                }
              >
                <VisualizationContainer
                  editMode={false}
                  fromTime="now-30m"
                  http={[MockFunction]}
                  key="tomAP4QBiaYaSxpXALls"
                  onEditClick={[MockFunction]}
                  onRefresh={true}
                  pplFilterValue=""
                  pplService={
                    PPLService {
                      "fetch": [Function],
                      "http": [MockFunction],
                    }
                  }
                  removeVisualization={[Function]}
                  savedVisualizationId="tomAP4QBiaYaSxpXALls"
                  spanParam="1h"
                  toTime="now"
                  usedInNotebooks={true}
                  visualizationId="tomAP4QBiaYaSxpXALls"
                >
                  <EuiPanel
                    className="panel-full-width"
                    data-test-subj="VisualizationPanel"
                    grow={false}
                  >
                    <div
                      className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow euiPanel--flexGrowZero panel-full-width"
                      data-test-subj="VisualizationPanel"
                    >
                      <div
                        className=""
                      >
                        <EuiFlexGroup
                          justifyContent="spaceBetween"
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                          >
                            <EuiFlexItem
                              style={
                                Object {
                                  "width": "35%",
                                }
                              }
                            >
                              <div
                                className="euiFlexItem"
                                style={
                                  Object {
                                    "width": "35%",
                                  }
                                }
                              >
                                <EuiText
                                  className="panels-title-text"
                                  grow={false}
                                >
                                  <div
                                    className="euiText euiText--medium panels-title-text euiText--constrainedWidth"
                                  >
                                    <EuiToolTip
                                      content=""
                                      delay="long"
                                      position="top"
                                    >
                                      <span
                                        className="euiToolTipAnchor"
                                        onKeyUp={[Function]}
                                        onMouseOut={[Function]}
                                        onMouseOver={[Function]}
                                      >
                                        <h5
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                        />
                                      </span>
                                    </EuiToolTip>
                                  </div>
                                </EuiText>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem
                              className="visualization-action-button"
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero visualization-action-button"
                              >
                                <EuiPopover
                                  anchorPosition="downLeft"
                                  button={
                                    <EuiButtonIcon
                                      aria-label="actionMenuButton"
                                      iconType="boxesHorizontal"
                                      onClick={[Function]}
                                    />
                                  }
                                  closePopover={[Function]}
                                  display="inlineBlock"
                                  hasArrow={true}
                                  isOpen={false}
                                  ownFocus={true}
                                  panelPaddingSize="m"
                                >
                                  <div
                                    className="euiPopover euiPopover--anchorDownLeft"
                                  >
                                    <div
                                      className="euiPopover__anchor"
                                    >
                                      <EuiButtonIcon
                                        aria-label="actionMenuButton"
                                        iconType="boxesHorizontal"
                                        onClick={[Function]}
                                      >
                                        <button
                                          aria-label="actionMenuButton"
                                          className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <EuiIcon
                                            aria-hidden="true"
                                            className="euiButtonIcon__icon"
                                            color="inherit"
                                            size="m"
                                            type="boxesHorizontal"
                                          >
                                            <EuiIconEmpty
                                              aria-hidden={true}
                                              className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                              focusable="false"
                                              role="img"
                                              style={null}
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                focusable="false"
                                                height={16}
                                                role="img"
                                                style={null}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              />
                                            </EuiIconEmpty>
                                          </EuiIcon>
                                        </button>
                                      </EuiButtonIcon>
                                    </div>
                                  </div>
                                </EuiPopover>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </div>
                      <div
                        className="visualization-div"
                      >
                        <EuiLoadingChart
                          className="visualization-loading-chart"
                          mono={true}
                          size="xl"
                        >
                          <span
                            className="euiLoadingChart euiLoadingChart--mono visualization-loading-chart euiLoadingChart--xLarge"
                          >
                            <span
                              className="euiLoadingChart__bar"
                            />
                            <span
                              className="euiLoadingChart__bar"
                            />
                            <span
                              className="euiLoadingChart__bar"
                            />
                            <span
                              className="euiLoadingChart__bar"
                            />
                          </span>
                        </EuiLoadingChart>
                      </div>
                    </div>
                  </EuiPanel>
                </VisualizationContainer>
              </div>
            </GridItem>
            <GridItem
              cancel=""
              className=""
              cols={1}
              containerPadding={
                Array [
                  10,
                  10,
                ]
              }
              containerWidth={0}
              h={2}
              handle=""
              i="prometheus.process_resident_memory_bytes"
              isDraggable={false}
              isResizable={false}
              key=".$prometheus.process_resident_memory_bytes"
              margin={
                Array [
                  10,
                  10,
                ]
              }
              maxH={Infinity}
              maxRows={Infinity}
              maxW={12}
              minH={1}
              minW={12}
              onDrag={[Function]}
              onDragStart={[Function]}
              onDragStop={[Function]}
              onResize={[Function]}
              onResizeStart={[Function]}
              onResizeStop={[Function]}
              rowHeight={150}
              static={true}
              useCSSTransforms={true}
              usePercentages={false}
              w={1}
              x={0}
              y={4}
            >
              <div
                className="react-grid-item static cssTransforms"
                key="prometheus.process_resident_memory_bytes"
                style={
                  Object {
                    "MozTransform": "translate(10px,650px)",
                    "OTransform": "translate(10px,650px)",
                    "WebkitTransform": "translate(10px,650px)",
                    "height": "310px",
                    "msTransform": "translate(10px,650px)",
                    "position": "absolute",
                    "transform": "translate(10px,650px)",
                    "width": "-20px",
                  }
                }
              >
                <VisualizationContainer
                  catalogVisualization={true}
                  editMode={false}
                  fromTime="now-30m"
                  http={[MockFunction]}
                  key="prometheus.process_resident_memory_bytes"
                  onEditClick={[MockFunction]}
                  onRefresh={true}
                  pplFilterValue=""
                  pplService={
                    PPLService {
                      "fetch": [Function],
                      "http": [MockFunction],
                    }
                  }
                  removeVisualization={[Function]}
                  savedVisualizationId="prometheus.process_resident_memory_bytes"
                  spanParam="1h"
                  toTime="now"
                  usedInNotebooks={true}
                  visualizationId="prometheus.process_resident_memory_bytes"
                >
                  <EuiPanel
                    className="panel-full-width"
                    data-test-subj="prometheus.process_resident_memory_bytesVisualizationPanel"
                    grow={false}
                  >
                    <div
                      className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow euiPanel--flexGrowZero panel-full-width"
                      data-test-subj="prometheus.process_resident_memory_bytesVisualizationPanel"
                    >
                      <div
                        className=""
                      >
                        <EuiFlexGroup
                          justifyContent="spaceBetween"
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                          >
                            <EuiFlexItem
                              style={
                                Object {
                                  "width": "35%",
                                }
                              }
                            >
                              <div
                                className="euiFlexItem"
                                style={
                                  Object {
                                    "width": "35%",
                                  }
                                }
                              >
                                <EuiText
                                  className="panels-title-text"
                                  grow={false}
                                >
                                  <div
                                    className="euiText euiText--medium panels-title-text euiText--constrainedWidth"
                                  >
                                    <EuiToolTip
                                      content="prometheus.process_resident_memory_bytes"
                                      delay="long"
                                      position="top"
                                    >
                                      <span
                                        className="euiToolTipAnchor"
                                        onKeyUp={[Function]}
                                        onMouseOut={[Function]}
                                        onMouseOver={[Function]}
                                      >
                                        <h5
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                        >
                                          prometheus.process_resident_memory_bytes
                                        </h5>
                                      </span>
                                    </EuiToolTip>
                                  </div>
                                </EuiText>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem
                              className="visualization-action-button"
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero visualization-action-button"
                              >
                                <EuiPopover
                                  anchorPosition="downLeft"
                                  button={
                                    <EuiButtonIcon
                                      aria-label="actionMenuButton"
                                      iconType="boxesHorizontal"
                                      onClick={[Function]}
                                    />
                                  }
                                  closePopover={[Function]}
                                  display="inlineBlock"
                                  hasArrow={true}
                                  isOpen={false}
                                  ownFocus={true}
                                  panelPaddingSize="m"
                                >
                                  <div
                                    className="euiPopover euiPopover--anchorDownLeft"
                                  >
                                    <div
                                      className="euiPopover__anchor"
                                    >
                                      <EuiButtonIcon
                                        aria-label="actionMenuButton"
                                        iconType="boxesHorizontal"
                                        onClick={[Function]}
                                      >
                                        <button
                                          aria-label="actionMenuButton"
                                          className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <EuiIcon
                                            aria-hidden="true"
                                            className="euiButtonIcon__icon"
                                            color="inherit"
                                            size="m"
                                            type="boxesHorizontal"
                                          >
                                            <EuiIconEmpty
                                              aria-hidden={true}
                                              className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                              focusable="false"
                                              role="img"
                                              style={null}
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                focusable="false"
                                                height={16}
                                                role="img"
                                                style={null}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              />
                                            </EuiIconEmpty>
                                          </EuiIcon>
                                        </button>
                                      </EuiButtonIcon>
                                    </div>
                                  </div>
                                </EuiPopover>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </div>
                      <div
                        className="visualization-div"
                      >
                        <EuiLoadingChart
                          className="visualization-loading-chart"
                          mono={true}
                          size="xl"
                        >
                          <span
                            className="euiLoadingChart euiLoadingChart--mono visualization-loading-chart euiLoadingChart--xLarge"
                          >
                            <span
                              className="euiLoadingChart__bar"
                            />
                            <span
                              className="euiLoadingChart__bar"
                            />
                            <span
                              className="euiLoadingChart__bar"
                            />
                            <span
                              className="euiLoadingChart__bar"
                            />
                          </span>
                        </EuiLoadingChart>
                      </div>
                    </div>
                  </EuiPanel>
                </VisualizationContainer>
              </div>
            </GridItem>
          </div>
        </ReactGridLayout>
      </ResponsiveReactGridLayout>
    </WidthProvider>
  </MetricsGrid>
</Provider>
`;
